# -*- coding: utf-8 -*-
"""ActividadIntegradora3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GB5i7TnFBCzdWlAfaOg_59xP0vl1kvzX
"""

# Commented out IPython magic to ensure Python compatibility.
import nltk
import sklearn
import matplotlib
import matplotlib.pyplot as plt
matplotlib.use('Agg')
import numpy as np
# if using a Jupyter notebook, include:
# %matplotlib inline

"""Tutorial 1"""

nltk.download()

# tokenizing - word tokenizers ... sentence tokenizers . Separate by words ... separate by sentences.
# lexicon and corporas. 
# corporas - body of text all around the same thing.
# lexicon - words and their meanings.

from nltk.tokenize import sent_tokenize, word_tokenize

example_text = "Hello Mr. Smith, how are you doing today? The wheater is great and Python is awesome. The sky is pinish-blue. You should not eat cardboard."


print(sent_tokenize(example_text))
print(word_tokenize(example_text))

for i in word_tokenize(example_text):
  print(i)

"""Tutorial 2"""

#Stop words. Palabras que no importan, que no tienen significado. Para data analysis no importan.

from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize

example_sentence = "This is an example showing off stop world filtration."
stop_words = set(stopwords.words("english"))
#print(stop_words)

words = word_tokenize(example_sentence)

filtered_sentence = []

for w in words:
  if w not in stop_words:
    filtered_sentence.append(w)
  
print(filtered_sentence)

#fileterd_sentence = [w for w in fords if not w in stop_words]

"""Tutorial 3"""

#Steming - A form of data pre processing, take de root stem of the word
# Esto se hace porque muchas veces se tienen diferentes variaciones de las palabras pero significan lo mismo. 
#Porterstemer Algoritmo para hacer stem. 

from nltk.stem import PorterStemmer
from nltk.tokenize import word_tokenize

ps = PorterStemmer()

example_words = ["phyton","phytoner","phytoning","phytoned","phytonly"]

#for w in example_words:
# print(ps.stem(w))

new_text = "It is very important to be pythonly while you are pythoning with phyton. All phytoners have pythoned poorly at least once."

words = word_tokenize(new_text)

for w in words:
  print(ps.stem(w))

"""Tutorial 4"""

#Part of speech taging. Pre processing. Labeling the part of speech in every single word. 

from nltk.corpus import state_union
from nltk.tokenize import PunktSentenceTokenizer #Unsupervised ML sentence tokenizer. Ya esta pre entrenado

train_text = state_union.raw("2005-GWBush.txt")
sample_text = state_union.raw("2006-GWBush.txt")

custom_sent_tokenizer = PunktSentenceTokenizer(train_text)

tokenized = custom_sent_tokenizer.tokenize(sample_text)

def process_content():
  try:
    for i in tokenized:
      words = nltk.word_tokenize(i)
      tagged = nltk.pos_tag(words)

      print(tagged)
  except Exception as e:
    print(str(e))

process_content()  #Creates touple, of the word and then the part of speech.

"""Tutorial 5"""

#Chunking. 

#Part of speech taging. Pre processing. Labeling the part of speech in every single word. 

from nltk.corpus import state_union
from nltk.tokenize import PunktSentenceTokenizer #Unsupervised ML sentence tokenizer. Ya esta pre entrenado

train_text = state_union.raw("2005-GWBush.txt")
sample_text = state_union.raw("2006-GWBush.txt")

custom_sent_tokenizer = PunktSentenceTokenizer(train_text)

tokenized = custom_sent_tokenizer.tokenize(sample_text)

def process_content():
  try:
    for i in tokenized:
      words = nltk.word_tokenize(i)
      tagged = nltk.pos_tag(words)

      chunkGram = """Chunk: {<RB.?>*<VB.?>*<NNP>+<NN>?}"""  #RB is Any form of an adverb, we are looking for zero or more of these. VB is verb and NNP is proper noun. NN is a nown.
      
      chunkParser = nltk.RegexpParser(chunkGram)
      chunked = chunkParser.parse(tagged)

      print(chunked)


  except Exception as e:
    print(str(e))

process_content()  #Creates touple, of the word and then the part of speech.

"""Tutorial 6"""

from nltk.corpus import state_union
from nltk.tokenize import PunktSentenceTokenizer #Unsupervised ML sentence tokenizer. Ya esta pre entrenado

train_text = state_union.raw("2005-GWBush.txt")
sample_text = state_union.raw("2006-GWBush.txt")

custom_sent_tokenizer = PunktSentenceTokenizer(train_text)

tokenized = custom_sent_tokenizer.tokenize(sample_text)

def process_content():
  try:
    for i in tokenized[5:]:
      words = nltk.word_tokenize(i)
      tagged = nltk.pos_tag(words)

      chunkGram = """Chunk: {<.*>+}
                              }<VB.?|IN|DT|TO>+{"""  # Chunk everything except for verb, prepositions or determinators. 
      
      chunkParser = nltk.RegexpParser(chunkGram)
      chunked = chunkParser.parse(tagged)

      print(chunked)

  except Exception as e:
    print(str(e))

process_content()  #Creates touple, of the word and then the part of speech.

"""Tutorial 7"""

#named entity recognition.
from nltk.corpus import state_union
from nltk.tokenize import PunktSentenceTokenizer #Unsupervised ML sentence tokenizer. Ya esta pre entrenado

train_text = state_union.raw("2005-GWBush.txt")
sample_text = state_union.raw("2006-GWBush.txt")

custom_sent_tokenizer = PunktSentenceTokenizer(train_text)

tokenized = custom_sent_tokenizer.tokenize(sample_text)

def process_content():
  try:
    for i in tokenized[5:]:
      words = nltk.word_tokenize(i)
      tagged = nltk.pos_tag(words)

      namedEnt = nltk.ne_chunk(tagged, binary = True)
      print(namedEnt)

  except Exception as e:
    print(str(e))

process_content()  #Creates touple, of the word and then the part of speech.

"""Tutorial 8"""

# Lematizing Es una operacion similar a steamming, pero el resultado es una palabra, podría ser un sinonimo o la palabra original. 
# Es un poco mejor que stemming.
from nltk.stem import WordNetLemmatizer

lemmatizer = WordNetLemmatizer()

print(lemmatizer.lemmatize("cats"))
print(lemmatizer.lemmatize("cacti"))
print(lemmatizer.lemmatize("geese"))
print(lemmatizer.lemmatize("rocks"))
print(lemmatizer.lemmatize("phyton"))

print(lemmatizer.lemmatize("better",pos="a")) # A de adjetivo
print(lemmatizer.lemmatize("better")) # El valor default es pos = n que es de noun.
print(lemmatizer.lemmatize("best",pos="a"))
print(lemmatizer.lemmatize("run"))
print(lemmatizer.lemmatize("run",pos="v")) # V de verbo

"""Tutorial 9"""

# Tutorial 9
# Estre tutorial es sobre acceder a los archivos de corpus, ahí hay información muy valiosa que se puede utilizar para entrenar. 
import nltk
from nltk.corpus import gutenberg
from nltk.tokenize import sent_tokenize

print(nltk.__file__)
sample = gutenberg.raw("bible-kjv.txt")

tok = sent_tokenize(sample)

print(tok[5:15])

"""Tutorial 10"""

#Tutorial 10
# Word Net is one of the larges capability corpora in nltk.
from nltk.corpus import wordnet

syns = wordnet.synsets("program")
print(syns[0].name()) #Synset
print(syns[0].lemmas()[0].name()) # Just the word

#definition
print(syns[0].definition())

#examples 
print(syns[0].examples())

synonyms = []
antonyms = []

for syn in wordnet.synsets("good"):
  for l in syn.lemmas():
    #print("l:",l)
    synonyms.append(l.name())
    if l.antonyms():
      antonyms.append(l.antonyms()[0].name())

print(set(synonyms))
print(set(antonyms))

#Compare the similarity between these two words, the semantic similarity.

w1 = wordnet.synset("ship.n.01")
w2 = wordnet.synset("boat.n.01")

print("similarity: ", w1.wup_similarity(w2))

w1 = wordnet.synset("ship.n.01")
w2 = wordnet.synset("car.n.01")

print("similarity: ", w1.wup_similarity(w2))

w1 = wordnet.synset("ship.n.01")
w2 = wordnet.synset("cat.n.01")

print("similarity: ", w1.wup_similarity(w2))

w1 = wordnet.synset("ship.n.01")
w2 = wordnet.synset("cactus.n.01")

print("similarity: ", w1.wup_similarity(w2))

"""Tutorial 11"""

#Tutorial 11
# Start creating the text classifier for sentiment analysis. This could be done for economics, politics, that kind of things. 
# Our classifier will say if something is positive or something is negative. 
# Our method could be applied to any binary classifier. 

import nltk
import random
from nltk.corpus import movie_reviews   #Already labeled data. 

documents = [(list(movie_reviews.words(fileid)), category)
              for category in movie_reviews.categories()
              for fileid in movie_reviews.fileids(category)]


random.shuffle(documents)

#print(documents[1])

all_words = []
for w in movie_reviews.words():
  all_words.append(w.lower())

all_words = nltk.FreqDist(all_words)

print(all_words.most_common(15))

print(all_words["stupid"])

"""Tutorial 12

"""

#Tutorial 12
# Start creating the text classifier for sentiment analysis. This could be done for economics, politics, that kind of things. 
# Our classifier will say if something is positive or something is negative. 
# Our method could be applied to any binary classifier. 

import nltk
import random
from nltk.corpus import movie_reviews   #Already labeled data. 

documents = [(list(movie_reviews.words(fileid)), category)
              for category in movie_reviews.categories()
              for fileid in movie_reviews.fileids(category)]


random.shuffle(documents)

#print(documents[1])

all_words = []
for w in movie_reviews.words():
  all_words.append(w.lower())

all_words = nltk.FreqDist(all_words)

#print(all_words.most_common(15))
#print(all_words["stupid"])

word_features = list(all_words.keys())[:3000]

def find_features(document):
  words = set(document)
  features = {}
  for w in word_features:
    features[w] = (w in words)
    # If the word is in the top 3000 this will be true if not false.
  return features

print((find_features(movie_reviews.words('neg/cv000_29416.txt'))))

featuresets = [(find_features(rev), category) for (rev, category) in documents]

"""Tutorial 13

"""

# Tutorial 13
# Using Naive Bayes to clasify as positive or negative.
# Start creating the text classifier for sentiment analysis. This could be done for economics, politics, that kind of things. 
# Our classifier will say if something is positive or something is negative. 
# Our method could be applied to any binary classifier. 

import nltk
import random
from nltk.corpus import movie_reviews   #Already labeled data. 

documents = [(list(movie_reviews.words(fileid)), category)
              for category in movie_reviews.categories()
              for fileid in movie_reviews.fileids(category)]


random.shuffle(documents)

#print(documents[1])

all_words = []
for w in movie_reviews.words():
  all_words.append(w.lower())

all_words = nltk.FreqDist(all_words)

#print(all_words.most_common(15))
#print(all_words["stupid"])

word_features = list(all_words.keys())[:3000]

def find_features(document):
  words = set(document)
  features = {}
  for w in word_features:
    features[w] = (w in words)
    # If the word is in the top 3000 this will be true if not false.
  return features

#print((find_features(movie_reviews.words('neg/cv000_29416.txt'))))

featuresets = [(find_features(rev), category) for (rev, category) in documents]

#Separate training and testing set.
training_set = featuresets[:1900]
testing_set = featuresets[1900:]

# Bayes algorithm.  posterior = prior occurences x liklihood / evidence. 

classifier = nltk.NaiveBayesClassifier.train(training_set)

print("Naive Bayes Algo accuracy:", (nltk.classify.accuracy(classifier, testing_set))*100)
classifier.show_most_informative_features(15)

"""Tutorial 14"""

# Tutorial 14
# Pickle, save the trained algorithm so every time we want to use it we do not have to go and re train it. 


import nltk
import random
from nltk.corpus import movie_reviews   #Already labeled data. 
import pickle

documents = [(list(movie_reviews.words(fileid)), category)
              for category in movie_reviews.categories()
              for fileid in movie_reviews.fileids(category)]


random.shuffle(documents)

#print(documents[1])

all_words = []
for w in movie_reviews.words():
  all_words.append(w.lower())

all_words = nltk.FreqDist(all_words)

#print(all_words.most_common(15))
#print(all_words["stupid"])

word_features = list(all_words.keys())[:3000]

def find_features(document):
  words = set(document)
  features = {}
  for w in word_features:
    features[w] = (w in words)
    # If the word is in the top 3000 this will be true if not false.
  return features

#print((find_features(movie_reviews.words('neg/cv000_29416.txt'))))

featuresets = [(find_features(rev), category) for (rev, category) in documents]

#Separate training and testing set.
training_set = featuresets[:1900]
testing_set = featuresets[1900:]

# Bayes algorithm.  posterior = prior occurences x liklihood / evidence. 

classifier = nltk.NaiveBayesClassifier.train(training_set) # I could comment this but the saved filed is in only in my computer. 

save_classifier = open("naivebayes.pickle","wb")
pickle.dump(classifier, save_classifier) #What do we want to save, where do we want to save it. 
save_classifier.close()

classifier_f = open("naivebayes.pickle","rb")
classifier = pickle.load(classifier_f)
classifier_f.close()

print("Naive Bayes Algo accuracy:", (nltk.classify.accuracy(classifier, testing_set))*100)
classifier.show_most_informative_features(15)

"""Tutorial 15"""

# Tutorial 15
#Nltk is a Natural Language Toolkit, not ML
#Scikit is ML.

import nltk
import random
from nltk.corpus import movie_reviews   #Already labeled data.
from nltk.classify.scikitlearn import SklearnClassifier 
import pickle

from sklearn.naive_bayes import MultinomialNB, GaussianNB, BernoulliNB

from sklearn.linear_model import LogisticRegression, SGDClassifier
from sklearn.svm import SVC, LinearSVC, NuSVC

documents = [(list(movie_reviews.words(fileid)), category)
              for category in movie_reviews.categories()
              for fileid in movie_reviews.fileids(category)]


random.shuffle(documents)

#print(documents[1])

all_words = []
for w in movie_reviews.words():
  all_words.append(w.lower())

all_words = nltk.FreqDist(all_words)

#print(all_words.most_common(15))
#print(all_words["stupid"])

word_features = list(all_words.keys())[:3000]

def find_features(document):
  words = set(document)
  features = {}
  for w in word_features:
    features[w] = (w in words)
    # If the word is in the top 3000 this will be true if not false.
  return features

#print((find_features(movie_reviews.words('neg/cv000_29416.txt'))))

featuresets = [(find_features(rev), category) for (rev, category) in documents]

#Separate training and testing set.
training_set = featuresets[:1900]
testing_set = featuresets[1900:]

# Bayes algorithm.  posterior = prior occurences x liklihood / evidence. 

classifier_f = open("naivebayes.pickle","rb")
classifier = pickle.load(classifier_f)
classifier_f.close()

print("Original Naive Bayes Algo accuracy:", (nltk.classify.accuracy(classifier, testing_set))*100)
classifier.show_most_informative_features(15)

MNB_classifier = SklearnClassifier(MultinomialNB())
MNB_classifier.train(training_set)
print("MNB_classifier Algo accuracy:", (nltk.classify.accuracy(MNB_classifier, testing_set))*100)

#GaussianNB_classifier = SklearnClassifier(GaussianNB())
#GaussianNB_classifier.train(training_set)
#print("GaussianNB_classifier Algo accuracy:", (nltk.classify.accuracy(GaussianNB_classifier, testing_set))*100)

BernouliNB_classifier = SklearnClassifier(BernoulliNB())
BernouliNB_classifier.train(training_set)
print("BernouliNB_classifier Algo accuracy:", (nltk.classify.accuracy(BernouliNB_classifier, testing_set))*100)

#LogisticRegression, SGDClassifier
#SVC, LinearSVC, NuSVC

LogisticRegression_classifier = SklearnClassifier(LogisticRegression())
LogisticRegression_classifier.train(training_set)
print("LogisticRegression_classifier Algo accuracy:", (nltk.classify.accuracy(LogisticRegression_classifier, testing_set))*100)

SGDClassifier_classifier = SklearnClassifier(SGDClassifier())
SGDClassifier_classifier.train(training_set)
print("SGDClassifier_classifier Algo accuracy:", (nltk.classify.accuracy(SGDClassifier_classifier, testing_set))*100)

SVC_classifier = SklearnClassifier(SVC())
SVC_classifier.train(training_set)
print("SVC_classifier Algo accuracy:", (nltk.classify.accuracy(SVC_classifier, testing_set))*100)

LinearSVC_classifier = SklearnClassifier(LinearSVC())
LinearSVC_classifier.train(training_set)
print("LinearSVC_classifier Algo accuracy:", (nltk.classify.accuracy(LinearSVC_classifier, testing_set))*100)

NuSVC_classifier = SklearnClassifier(NuSVC())
NuSVC_classifier.train(training_set)
print("NuSVC_classifier Algo accuracy:", (nltk.classify.accuracy(NuSVC_classifier, testing_set))*100)

"""Tutorial 16"""

# Tutorial 16

from nltk.classify import ClassifierI
from statistics import mode

class VoteClassifier(ClassifierI):
  def __init__(self, *classifiers):
    self._classifiers = classifiers

  def classify(self, features):
    votes = []
    for c in self._classifiers:
      v = c.classify(features)
      votes.append(v)
    return mode(votes)

  def confidence(self, features):
    votes = []
    for c in self._classifiers:
      v = c.classify(features)
      votes.append(v)
    
    choice_votes = votes.count(mode(votes))
    conf = choice_votes / len(votes)
    return conf


print("Original Naive Bayes Algo accuracy:", (nltk.classify.accuracy(classifier, testing_set))*100)

MNB_classifier = SklearnClassifier(MultinomialNB())
MNB_classifier.train(training_set)
print("MNB_classifier Algo accuracy:", (nltk.classify.accuracy(MNB_classifier, testing_set))*100)


BernouliNB_classifier = SklearnClassifier(BernoulliNB())
BernouliNB_classifier.train(training_set)
print("BernouliNB_classifier Algo accuracy:", (nltk.classify.accuracy(BernouliNB_classifier, testing_set))*100)


LogisticRegression_classifier = SklearnClassifier(LogisticRegression())
LogisticRegression_classifier.train(training_set)
print("LogisticRegression_classifier Algo accuracy:", (nltk.classify.accuracy(LogisticRegression_classifier, testing_set))*100)

SGDClassifier_classifier = SklearnClassifier(SGDClassifier())
SGDClassifier_classifier.train(training_set)
print("SGDClassifier_classifier Algo accuracy:", (nltk.classify.accuracy(SGDClassifier_classifier, testing_set))*100)


LinearSVC_classifier = SklearnClassifier(LinearSVC())
LinearSVC_classifier.train(training_set)
print("LinearSVC_classifier Algo accuracy:", (nltk.classify.accuracy(LinearSVC_classifier, testing_set))*100)

NuSVC_classifier = SklearnClassifier(NuSVC())
NuSVC_classifier.train(training_set)
print("NuSVC_classifier Algo accuracy:", (nltk.classify.accuracy(NuSVC_classifier, testing_set))*100)



voted_classifier = VoteClassifier(classifier,MNB_classifier,BernouliNB_classifier,LogisticRegression_classifier,SGDClassifier_classifier,LinearSVC_classifier,NuSVC_classifier)
print("voted_classifier Algo accuracy:", (nltk.classify.accuracy(voted_classifier, testing_set))*100)

print("Classification:", voted_classifier.classify(testing_set[0][0]), "Confidence:", voted_classifier.confidence(testing_set[0][0]))

print("Classification:", voted_classifier.classify(testing_set[1][0]), "Confidence:", voted_classifier.confidence(testing_set[1][0]))
print("Classification:", voted_classifier.classify(testing_set[2][0]), "Confidence:", voted_classifier.confidence(testing_set[2][0]))
print("Classification:", voted_classifier.classify(testing_set[3][0]), "Confidence:", voted_classifier.confidence(testing_set[3][0]))
print("Classification:", voted_classifier.classify(testing_set[4][0]), "Confidence:", voted_classifier.confidence(testing_set[4][0]))
print("Classification:", voted_classifier.classify(testing_set[5][0]), "Confidence:", voted_classifier.confidence(testing_set[5][0]))

"""Tutorial 17"""

#Tutorial 17
# In this tutorial we will see how the algorithm behaves only analyzing positve data or negative data. See its distribution. 
import nltk
import random
from nltk.corpus import movie_reviews   #Already labeled data.
from nltk.classify.scikitlearn import SklearnClassifier 
import pickle

from sklearn.naive_bayes import MultinomialNB, GaussianNB, BernoulliNB

from sklearn.linear_model import LogisticRegression, SGDClassifier
from sklearn.svm import SVC, LinearSVC, NuSVC

from nltk.classify import ClassifierI
from statistics import mode

class VoteClassifier(ClassifierI):
  def __init__(self, *classifiers):
    self._classifiers = classifiers

  def classify(self, features):
    votes = []
    for c in self._classifiers:
      v = c.classify(features)
      votes.append(v)
    return mode(votes)

  def confidence(self, features):
    votes = []
    for c in self._classifiers:
      v = c.classify(features)
      votes.append(v)
    
    choice_votes = votes.count(mode(votes))
    conf = choice_votes / len(votes)
    return conf

documents = [(list(movie_reviews.words(fileid)), category)
              for category in movie_reviews.categories()
              for fileid in movie_reviews.fileids(category)]


#random.shuffle(documents) # Stop shuffling the data so whe know that the first thousand documents are negative and the second thousand docs are positive. 

#print(documents[1])

all_words = []
for w in movie_reviews.words():
  all_words.append(w.lower())

all_words = nltk.FreqDist(all_words)

#print(all_words.most_common(15))
#print(all_words["stupid"])

word_features = list(all_words.keys())[:3000]

def find_features(document):
  words = set(document)
  features = {}
  for w in word_features:
    features[w] = (w
     in words)
    # If the word is in the top 3000 this will be true if not false.
  return features

#print((find_features(movie_reviews.words('neg/cv000_29416.txt'))))

featuresets = [(find_features(rev), category) for (rev, category) in documents]

#Separate training and testing set.

#Positive Data Example:
#training_set = featuresets[:1900]
#testing_set = featuresets[1900:] #This will be all positive data. 

#Negative Data Example:
training_set = featuresets[100:]
testing_set = featuresets[:100] #This will be all negative data. 

# Bayes algorithm.  posterior = prior occurences x liklihood / evidence. 

classifier_f = open("naivebayes.pickle","rb")
classifier = pickle.load(classifier_f)
classifier_f.close()

print("Original Naive Bayes Algo accuracy:", (nltk.classify.accuracy(classifier, testing_set))*100)
classifier.show_most_informative_features(15)

MNB_classifier = SklearnClassifier(MultinomialNB())
MNB_classifier.train(training_set)
print("MNB_classifier Algo accuracy:", (nltk.classify.accuracy(MNB_classifier, testing_set))*100)

#GaussianNB_classifier = SklearnClassifier(GaussianNB())
#GaussianNB_classifier.train(training_set)
#print("GaussianNB_classifier Algo accuracy:", (nltk.classify.accuracy(GaussianNB_classifier, testing_set))*100)

BernouliNB_classifier = SklearnClassifier(BernoulliNB())
BernouliNB_classifier.train(training_set)
print("BernouliNB_classifier Algo accuracy:", (nltk.classify.accuracy(BernouliNB_classifier, testing_set))*100)

#LogisticRegression, SGDClassifier
#SVC, LinearSVC, NuSVC

LogisticRegression_classifier = SklearnClassifier(LogisticRegression())
LogisticRegression_classifier.train(training_set)
print("LogisticRegression_classifier Algo accuracy:", (nltk.classify.accuracy(LogisticRegression_classifier, testing_set))*100)

SGDClassifier_classifier = SklearnClassifier(SGDClassifier())
SGDClassifier_classifier.train(training_set)
print("SGDClassifier_classifier Algo accuracy:", (nltk.classify.accuracy(SGDClassifier_classifier, testing_set))*100)

SVC_classifier = SklearnClassifier(SVC())
SVC_classifier.train(training_set)
print("SVC_classifier Algo accuracy:", (nltk.classify.accuracy(SVC_classifier, testing_set))*100)

LinearSVC_classifier = SklearnClassifier(LinearSVC())
LinearSVC_classifier.train(training_set)
print("LinearSVC_classifier Algo accuracy:", (nltk.classify.accuracy(LinearSVC_classifier, testing_set))*100)

NuSVC_classifier = SklearnClassifier(NuSVC())
NuSVC_classifier.train(training_set)
print("NuSVC_classifier Algo accuracy:", (nltk.classify.accuracy(NuSVC_classifier, testing_set))*100)

voted_classifier = VoteClassifier(classifier,MNB_classifier,BernouliNB_classifier,LogisticRegression_classifier,SGDClassifier_classifier,LinearSVC_classifier,NuSVC_classifier)
print("voted_classifier Algo accuracy:", (nltk.classify.accuracy(voted_classifier, testing_set))*100)

print("Classification:", voted_classifier.classify(testing_set[0][0]), "Confidence:", voted_classifier.confidence(testing_set[0][0]))
print("Classification:", voted_classifier.classify(testing_set[1][0]), "Confidence:", voted_classifier.confidence(testing_set[1][0]))
print("Classification:", voted_classifier.classify(testing_set[2][0]), "Confidence:", voted_classifier.confidence(testing_set[2][0]))
print("Classification:", voted_classifier.classify(testing_set[3][0]), "Confidence:", voted_classifier.confidence(testing_set[3][0]))
print("Classification:", voted_classifier.classify(testing_set[4][0]), "Confidence:", voted_classifier.confidence(testing_set[4][0]))
print("Classification:", voted_classifier.classify(testing_set[5][0]), "Confidence:", voted_classifier.confidence(testing_set[5][0]))

"""Tutorial 18"""

#Tutorial 18
# In this tutorial we will be importing a new dataset. We will use a better training dataset for the purposes of our project, a data set with smaller blurbs of text.

import nltk
import random
from nltk.corpus import movie_reviews   #Already labeled data.
from nltk.classify.scikitlearn import SklearnClassifier 
import pickle
from google.colab import files

from sklearn.naive_bayes import MultinomialNB, GaussianNB, BernoulliNB

from sklearn.linear_model import LogisticRegression, SGDClassifier
from sklearn.svm import SVC, LinearSVC, NuSVC

from nltk.classify import ClassifierI
from statistics import mode

from nltk.tokenize import word_tokenize
import io

class VoteClassifier(ClassifierI):
  def __init__(self, *classifiers):
    self._classifiers = classifiers

  def classify(self, features):
    votes = []
    for c in self._classifiers:
      v = c.classify(features)
      votes.append(v)
    return mode(votes)

  def confidence(self, features):
    votes = []
    for c in self._classifiers:
      v = c.classify(features)
      votes.append(v)
    
    choice_votes = votes.count(mode(votes))
    conf = choice_votes / len(votes)
    return conf



short_pos = io.open("positive.txt", encoding='latin-1').read()
short_neg = io.open("negative.txt", encoding='latin-1').read()

documents = []

for r in short_pos.split('\n'):
  documents.append((r,"pos"))

for r in short_neg.split('\n'):
  documents.append((r,"neg")) 

all_words = []

short_pos_words = word_tokenize(short_pos)
short_neg_words = word_tokenize(short_neg)

for w in short_pos_words:
  all_words.append(w.lower())

for w in short_neg_words:
  all_words.append(w.lower())


all_words = nltk.FreqDist(all_words)

word_features = list(all_words.keys())[:5000]

def find_features(document):
  words = word_tokenize(document)
  features = {}
  for w in word_features:
    features[w] = (w
     in words)
    # If the word is in the top 3000 this will be true if not false.
  return features

#print((find_features(movie_reviews.words('neg/cv000_29416.txt'))))

featuresets = [(find_features(rev), category) for (rev, category) in documents]

random.shuffle(featuresets)

#Separate training and testing set.

training_set = featuresets[:10000]
testing_set = featuresets[10000:] 

# Bayes algorithm.  posterior = prior occurences x liklihood / evidence. 

classifier = nltk.NaiveBayesClassifier.train(training_set) 

save_classifier = open("naivebayes.pickle","wb")
pickle.dump(classifier, save_classifier) #What do we want to save, where do we want to save it. 
save_classifier.close()

classifier_f = open("naivebayes.pickle","rb")
classifier = pickle.load(classifier_f)
classifier_f.close()

print("Original Naive Bayes Algo accuracy:", (nltk.classify.accuracy(classifier, testing_set))*100)
classifier.show_most_informative_features(15)

MNB_classifier = SklearnClassifier(MultinomialNB())
MNB_classifier.train(training_set)

save_classifier = open("MNB_classifier.pickle","wb")
pickle.dump(MNB_classifier, save_classifier) #What do we want to save, where do we want to save it. 
save_classifier.close()

classifier_f = open("MNB_classifier.pickle","rb")
MNB_classifier = pickle.load(classifier_f)
classifier_f.close()

print("MNB_classifier Algo accuracy:", (nltk.classify.accuracy(MNB_classifier, testing_set))*100)

#GaussianNB_classifier = SklearnClassifier(GaussianNB())
#GaussianNB_classifier.train(training_set)
#print("GaussianNB_classifier Algo accuracy:", (nltk.classify.accuracy(GaussianNB_classifier, testing_set))*100)

BernouliNB_classifier = SklearnClassifier(BernoulliNB())
BernouliNB_classifier.train(training_set)
print("BernouliNB_classifier Algo accuracy:", (nltk.classify.accuracy(BernouliNB_classifier, testing_set))*100)

#LogisticRegression, SGDClassifier
#SVC, LinearSVC, NuSVC

LogisticRegression_classifier = SklearnClassifier(LogisticRegression())
LogisticRegression_classifier.train(training_set)
print("LogisticRegression_classifier Algo accuracy:", (nltk.classify.accuracy(LogisticRegression_classifier, testing_set))*100)

SGDClassifier_classifier = SklearnClassifier(SGDClassifier())
SGDClassifier_classifier.train(training_set)
print("SGDClassifier_classifier Algo accuracy:", (nltk.classify.accuracy(SGDClassifier_classifier, testing_set))*100)

SVC_classifier = SklearnClassifier(SVC())
SVC_classifier.train(training_set)
print("SVC_classifier Algo accuracy:", (nltk.classify.accuracy(SVC_classifier, testing_set))*100)

LinearSVC_classifier = SklearnClassifier(LinearSVC())
LinearSVC_classifier.train(training_set)
print("LinearSVC_classifier Algo accuracy:", (nltk.classify.accuracy(LinearSVC_classifier, testing_set))*100)

NuSVC_classifier = SklearnClassifier(NuSVC())
NuSVC_classifier.train(training_set)
print("NuSVC_classifier Algo accuracy:", (nltk.classify.accuracy(NuSVC_classifier, testing_set))*100)

voted_classifier = VoteClassifier(classifier,MNB_classifier,BernouliNB_classifier,LogisticRegression_classifier,SGDClassifier_classifier,LinearSVC_classifier,NuSVC_classifier)
print("voted_classifier Algo accuracy:", (nltk.classify.accuracy(voted_classifier, testing_set))*100)

print("Classification:", voted_classifier.classify(testing_set[0][0]), "Confidence:", voted_classifier.confidence(testing_set[0][0]))
print("Classification:", voted_classifier.classify(testing_set[1][0]), "Confidence:", voted_classifier.confidence(testing_set[1][0]))
print("Classification:", voted_classifier.classify(testing_set[2][0]), "Confidence:", voted_classifier.confidence(testing_set[2][0]))
print("Classification:", voted_classifier.classify(testing_set[3][0]), "Confidence:", voted_classifier.confidence(testing_set[3][0]))
print("Classification:", voted_classifier.classify(testing_set[4][0]), "Confidence:", voted_classifier.confidence(testing_set[4][0]))
print("Classification:", voted_classifier.classify(testing_set[5][0]), "Confidence:", voted_classifier.confidence(testing_set[5][0]))

"""Tutorial 19"""

#Tutorial 19
import nltk
import random
from nltk.corpus import movie_reviews   #Already labeled data.
from nltk.classify.scikitlearn import SklearnClassifier 
import pickle
from google.colab import files

from sklearn.naive_bayes import MultinomialNB, GaussianNB, BernoulliNB

from sklearn.linear_model import LogisticRegression, SGDClassifier
from sklearn.svm import SVC, LinearSVC, NuSVC

from nltk.classify import ClassifierI
from statistics import mode

from nltk.tokenize import word_tokenize
import io

class VoteClassifier(ClassifierI):
  def __init__(self, *classifiers):
    self._classifiers = classifiers

  def classify(self, features):
    votes = []
    for c in self._classifiers:
      v = c.classify(features)
      votes.append(v)
    return mode(votes)

  def confidence(self, features):
    votes = []
    for c in self._classifiers:
      v = c.classify(features)
      votes.append(v)
    
    choice_votes = votes.count(mode(votes))
    conf = choice_votes / len(votes)
    return conf



short_pos = io.open("positive.txt", encoding='latin-1').read()
short_neg = io.open("negative.txt", encoding='latin-1').read()

documents = []
all_words = []

#j  is adject, r is adverb, and v is verb
#allowed_word_types = ["J","R","V"]
allowed_word_types = ["J"]

for p in short_pos.split('\n'):
  documents.append((p,"pos"))
  words = word_tokenize(p)
  pos = nltk.pos_tag(words)
  for w in pos:
    if w[1][0] in allowed_word_types:
      all_words.append(w[0].lower())

for p in short_neg.split('\n'):
  documents.append((p,"neg"))
  words = word_tokenize(p)
  neg = nltk.pos_tag(words)
  for w in neg:
    if w[1][0] in allowed_word_types:
      all_words.append(w[0].lower())




all_words = nltk.FreqDist(all_words)

word_features = list(all_words.keys())[:5000]

def find_features(document):
  words = word_tokenize(document)
  features = {}
  for w in word_features:
    features[w] = (w
     in words)
    # If the word is in the top 3000 this will be true if not false.
  return features

#print((find_features(movie_reviews.words('neg/cv000_29416.txt'))))

featuresets = [(find_features(rev), category) for (rev, category) in documents]

random.shuffle(featuresets)

#Separate training and testing set.

training_set = featuresets[:10000]
testing_set = featuresets[10000:] 

# Bayes algorithm.  posterior = prior occurences x liklihood / evidence. 

classifier = nltk.NaiveBayesClassifier.train(training_set) 

save_classifier = open("naivebayes.pickle","wb")
pickle.dump(classifier, save_classifier) #What do we want to save, where do we want to save it. 
save_classifier.close()

classifier_f = open("naivebayes.pickle","rb")
classifier = pickle.load(classifier_f)
classifier_f.close()

print("Original Naive Bayes Algo accuracy:", (nltk.classify.accuracy(classifier, testing_set))*100)
classifier.show_most_informative_features(15)

MNB_classifier = SklearnClassifier(MultinomialNB())
MNB_classifier.train(training_set)

save_classifier = open("MNB_classifier.pickle","wb")
pickle.dump(MNB_classifier, save_classifier) #What do we want to save, where do we want to save it. 
save_classifier.close()

classifier_f = open("MNB_classifier.pickle","rb")
MNB_classifier = pickle.load(classifier_f)
classifier_f.close()

print("MNB_classifier Algo accuracy:", (nltk.classify.accuracy(MNB_classifier, testing_set))*100)

#GaussianNB_classifier = SklearnClassifier(GaussianNB())
#GaussianNB_classifier.train(training_set)
#print("GaussianNB_classifier Algo accuracy:", (nltk.classify.accuracy(GaussianNB_classifier, testing_set))*100)

BernouliNB_classifier = SklearnClassifier(BernoulliNB())
BernouliNB_classifier.train(training_set)

save_classifier = open("BernouliNB_classifier.pickle","wb")
pickle.dump(BernouliNB_classifier, save_classifier) #What do we want to save, where do we want to save it. 
save_classifier.close()

classifier_f = open("BernouliNB_classifier.pickle","rb")
BernouliNB_classifier = pickle.load(classifier_f)
classifier_f.close()

print("BernouliNB_classifier Algo accuracy:", (nltk.classify.accuracy(BernouliNB_classifier, testing_set))*100)

#LogisticRegression, SGDClassifier
#SVC, LinearSVC, NuSVC

LogisticRegression_classifier = SklearnClassifier(LogisticRegression())
LogisticRegression_classifier.train(training_set)

save_classifier = open("LogisticRegression_classifier.pickle","wb")
pickle.dump(LogisticRegression_classifier, save_classifier) #What do we want to save, where do we want to save it. 
save_classifier.close()

classifier_f = open("LogisticRegression_classifier.pickle","rb")
LogisticRegression_classifier = pickle.load(classifier_f)
classifier_f.close()


print("LogisticRegression_classifier Algo accuracy:", (nltk.classify.accuracy(LogisticRegression_classifier, testing_set))*100)

SGDClassifier_classifier = SklearnClassifier(SGDClassifier())
SGDClassifier_classifier.train(training_set)

save_classifier = open("SGDClassifier_classifier.pickle","wb")
pickle.dump(SGDClassifier_classifier, save_classifier) #What do we want to save, where do we want to save it. 
save_classifier.close()

classifier_f = open("SGDClassifier_classifier.pickle","rb")
SGDClassifier_classifier = pickle.load(classifier_f)
classifier_f.close()

print("SGDClassifier_classifier Algo accuracy:", (nltk.classify.accuracy(SGDClassifier_classifier, testing_set))*100)

SVC_classifier = SklearnClassifier(SVC())
SVC_classifier.train(training_set)

save_classifier = open("SVC_classifier.pickle","wb")
pickle.dump(SVC_classifier, save_classifier) #What do we want to save, where do we want to save it. 
save_classifier.close()

classifier_f = open("SVC_classifier.pickle","rb")
SVC_classifier = pickle.load(classifier_f)
classifier_f.close()

print("SVC_classifier Algo accuracy:", (nltk.classify.accuracy(SVC_classifier, testing_set))*100)

LinearSVC_classifier = SklearnClassifier(LinearSVC())
LinearSVC_classifier.train(training_set)

save_classifier = open("LinearSVC_classifier.pickle","wb")
pickle.dump(LinearSVC_classifier, save_classifier) #What do we want to save, where do we want to save it. 
save_classifier.close()

classifier_f = open("LinearSVC_classifier.pickle","rb")
LinearSVC_classifier = pickle.load(classifier_f)
classifier_f.close()

print("LinearSVC_classifier Algo accuracy:", (nltk.classify.accuracy(LinearSVC_classifier, testing_set))*100)

#NuSVC_classifier = SklearnClassifier(NuSVC())
#NuSVC_classifier.train(training_set)

#save_classifier = open("NuSVC_classifier.pickle","wb")
#pickle.dump(NuSVC_classifier, save_classifier) #What do we want to save, where do we want to save it. 
#save_classifier.close()

#classifier_f = open("NuSVC_classifier.pickle","rb")
#NuSVC_classifier = pickle.load(classifier_f)
#classifier_f.close()

#print("NuSVC_classifier Algo accuracy:", (nltk.classify.accuracy(NuSVC_classifier, testing_set))*100)

voted_classifier = VoteClassifier(classifier,MNB_classifier,BernouliNB_classifier,LogisticRegression_classifier,SGDClassifier_classifier,LinearSVC_classifier,SVC_classifier)
print("voted_classifier Algo accuracy:", (nltk.classify.accuracy(voted_classifier, testing_set))*100)

def sentiment(text):
  feats = find_features(text)
  return voted_classifier.classify(feats)

# Same code but pickles already created
import nltk
import random
from nltk.corpus import movie_reviews   #Already labeled data.
from nltk.classify.scikitlearn import SklearnClassifier 
import pickle
from google.colab import files

from sklearn.naive_bayes import MultinomialNB, GaussianNB, BernoulliNB

from sklearn.linear_model import LogisticRegression, SGDClassifier
from sklearn.svm import SVC, LinearSVC, NuSVC

from nltk.classify import ClassifierI
from statistics import mode

from nltk.tokenize import word_tokenize
import io

class VoteClassifier(ClassifierI):
  def __init__(self, *classifiers):
    self._classifiers = classifiers

  def classify(self, features):
    votes = []
    for c in self._classifiers:
      v = c.classify(features)
      votes.append(v)
    return mode(votes)

  def confidence(self, features):
    votes = []
    for c in self._classifiers:
      v = c.classify(features)
      votes.append(v)
    
    choice_votes = votes.count(mode(votes))
    conf = choice_votes / len(votes)
    return conf



short_pos = io.open("positive.txt", encoding='latin-1').read()
short_neg = io.open("negative.txt", encoding='latin-1').read()

documents = []
all_words = []

#j  is adject, r is adverb, and v is verb
#allowed_word_types = ["J","R","V"]
allowed_word_types = ["J"]

for p in short_pos.split('\n'):
  documents.append((p,"pos"))
  words = word_tokenize(p)
  pos = nltk.pos_tag(words)
  for w in pos:
    if w[1][0] in allowed_word_types:
      all_words.append(w[0].lower())

for p in short_neg.split('\n'):
  documents.append((p,"neg"))
  words = word_tokenize(p)
  neg = nltk.pos_tag(words)
  for w in neg:
    if w[1][0] in allowed_word_types:
      all_words.append(w[0].lower())




all_words = nltk.FreqDist(all_words)

word_features = list(all_words.keys())[:5000]

def find_features(document):
  words = word_tokenize(document)
  features = {}
  for w in word_features:
    features[w] = (w
     in words)
    # If the word is in the top 5000 this will be true if not false.
  return features

#print((find_features(movie_reviews.words('neg/cv000_29416.txt'))))

featuresets = [(find_features(rev), category) for (rev, category) in documents]

random.shuffle(featuresets)

#Separate training and testing set.

training_set = featuresets[:10000]
testing_set = featuresets[10000:] 

# Bayes algorithm.  posterior = prior occurences x liklihood / evidence. 


classifier_f = open("naivebayes.pickle","rb")
classifier = pickle.load(classifier_f)
classifier_f.close()

print("Original Naive Bayes Algo accuracy:", (nltk.classify.accuracy(classifier, testing_set))*100)
classifier.show_most_informative_features(15)


classifier_f = open("MNB_classifier.pickle","rb")
MNB_classifier = pickle.load(classifier_f)
classifier_f.close()

print("MNB_classifier Algo accuracy:", (nltk.classify.accuracy(MNB_classifier, testing_set))*100)


classifier_f = open("BernouliNB_classifier.pickle","rb")
BernouliNB_classifier = pickle.load(classifier_f)
classifier_f.close()

print("BernouliNB_classifier Algo accuracy:", (nltk.classify.accuracy(BernouliNB_classifier, testing_set))*100)



classifier_f = open("LogisticRegression_classifier.pickle","rb")
LogisticRegression_classifier = pickle.load(classifier_f)
classifier_f.close()


print("LogisticRegression_classifier Algo accuracy:", (nltk.classify.accuracy(LogisticRegression_classifier, testing_set))*100)


classifier_f = open("SGDClassifier_classifier.pickle","rb")
SGDClassifier_classifier = pickle.load(classifier_f)
classifier_f.close()

print("SGDClassifier_classifier Algo accuracy:", (nltk.classify.accuracy(SGDClassifier_classifier, testing_set))*100)


#classifier_f = open("SVC_classifier.pickle","rb")
#SVC_classifier = pickle.load(classifier_f)
#classifier_f.close()

#print("SVC_classifier Algo accuracy:", (nltk.classify.accuracy(SVC_classifier, testing_set))*100)


classifier_f = open("LinearSVC_classifier.pickle","rb")
LinearSVC_classifier = pickle.load(classifier_f)
classifier_f.close()

print("LinearSVC_classifier Algo accuracy:", (nltk.classify.accuracy(LinearSVC_classifier, testing_set))*100)

#NuSVC_classifier = SklearnClassifier(NuSVC())
#NuSVC_classifier.train(training_set)

#save_classifier = open("NuSVC_classifier.pickle","wb")
#pickle.dump(NuSVC_classifier, save_classifier) #What do we want to save, where do we want to save it. 
#save_classifier.close()

#classifier_f = open("NuSVC_classifier.pickle","rb")
#NuSVC_classifier = pickle.load(classifier_f)
#classifier_f.close()

#print("NuSVC_classifier Algo accuracy:", (nltk.classify.accuracy(NuSVC_classifier, testing_set))*100)

voted_classifier = VoteClassifier(classifier,MNB_classifier,BernouliNB_classifier,LogisticRegression_classifier,SGDClassifier_classifier)
print("voted_classifier Algo accuracy:", (nltk.classify.accuracy(voted_classifier, testing_set))*100)

def sentiment(text):
  feats = find_features(text)
  return voted_classifier.classify(feats)

print(sentiment("This movie was great, one of the best movies I have ever seen"))
print(sentiment("This movie was horrible, not worth it"))

"""Tutorial 20"""

#Tutorial 20
import nltk
import random
from nltk.corpus import movie_reviews   #Already labeled data.
from nltk.classify.scikitlearn import SklearnClassifier 
import pickle
from google.colab import files

from sklearn.naive_bayes import MultinomialNB, GaussianNB, BernoulliNB

from sklearn.linear_model import LogisticRegression, SGDClassifier
from sklearn.svm import SVC, LinearSVC, NuSVC

from nltk.classify import ClassifierI
from statistics import mode

from nltk.tokenize import word_tokenize
import io

class VoteClassifier(ClassifierI):
  def __init__(self, *classifiers):
    self._classifiers = classifiers

  def classify(self, features):
    votes = []
    for c in self._classifiers:
      v = c.classify(features)
      votes.append(v)
    
    votes = []
    for c in self._classifiers:
      v = c.classify(features)
      votes.append(v)
    
    choice_votes = votes.count(mode(votes))
    conf = choice_votes / len(votes)

    return mode(votes),conf

  def confidence(self, features):
    votes = []
    for c in self._classifiers:
      v = c.classify(features)
      votes.append(v)
    
    choice_votes = votes.count(mode(votes))
    conf = choice_votes / len(votes)
    return conf



short_pos = io.open("positive.txt", encoding='latin-1').read()
short_neg = io.open("negative.txt", encoding='latin-1').read()

documents = []
all_words = []

#j  is adject, r is adverb, and v is verb
#allowed_word_types = ["J","R","V"]
allowed_word_types = ["J"]

for p in short_pos.split('\n'):
  documents.append((p,"pos"))
  words = word_tokenize(p)
  pos = nltk.pos_tag(words)
  for w in pos:
    if w[1][0] in allowed_word_types:
      all_words.append(w[0].lower())

for p in short_neg.split('\n'):
  documents.append((p,"neg"))
  words = word_tokenize(p)
  neg = nltk.pos_tag(words)
  for w in neg:
    if w[1][0] in allowed_word_types:
      all_words.append(w[0].lower())




all_words = nltk.FreqDist(all_words)

word_features = list(all_words.keys())[:5000]

def find_features(document):
  words = word_tokenize(document)
  features = {}
  for w in word_features:
    features[w] = (w
     in words)
    # If the word is in the top 5000 this will be true if not false.
  return features

#print((find_features(movie_reviews.words('neg/cv000_29416.txt'))))

featuresets = [(find_features(rev), category) for (rev, category) in documents]

random.shuffle(featuresets)

#Separate training and testing set.

training_set = featuresets[:10000]
testing_set = featuresets[10000:] 

# Bayes algorithm.  posterior = prior occurences x liklihood / evidence. 


classifier_f = open("naivebayes.pickle","rb")
classifier = pickle.load(classifier_f)
classifier_f.close()

print("Original Naive Bayes Algo accuracy:", (nltk.classify.accuracy(classifier, testing_set))*100)
classifier.show_most_informative_features(15)


classifier_f = open("MNB_classifier.pickle","rb")
MNB_classifier = pickle.load(classifier_f)
classifier_f.close()

print("MNB_classifier Algo accuracy:", (nltk.classify.accuracy(MNB_classifier, testing_set))*100)


classifier_f = open("BernouliNB_classifier.pickle","rb")
BernouliNB_classifier = pickle.load(classifier_f)
classifier_f.close()

print("BernouliNB_classifier Algo accuracy:", (nltk.classify.accuracy(BernouliNB_classifier, testing_set))*100)



classifier_f = open("LogisticRegression_classifier.pickle","rb")
LogisticRegression_classifier = pickle.load(classifier_f)
classifier_f.close()


print("LogisticRegression_classifier Algo accuracy:", (nltk.classify.accuracy(LogisticRegression_classifier, testing_set))*100)


classifier_f = open("SGDClassifier_classifier.pickle","rb")
SGDClassifier_classifier = pickle.load(classifier_f)
classifier_f.close()

print("SGDClassifier_classifier Algo accuracy:", (nltk.classify.accuracy(SGDClassifier_classifier, testing_set))*100)


#classifier_f = open("SVC_classifier.pickle","rb")
#SVC_classifier = pickle.load(classifier_f)
#classifier_f.close()

#print("SVC_classifier Algo accuracy:", (nltk.classify.accuracy(SVC_classifier, testing_set))*100)


classifier_f = open("LinearSVC_classifier.pickle","rb")
LinearSVC_classifier = pickle.load(classifier_f)
classifier_f.close()

print("LinearSVC_classifier Algo accuracy:", (nltk.classify.accuracy(LinearSVC_classifier, testing_set))*100)

#NuSVC_classifier = SklearnClassifier(NuSVC())
#NuSVC_classifier.train(training_set)

#save_classifier = open("NuSVC_classifier.pickle","wb")
#pickle.dump(NuSVC_classifier, save_classifier) #What do we want to save, where do we want to save it. 
#save_classifier.close()

#classifier_f = open("NuSVC_classifier.pickle","rb")
#NuSVC_classifier = pickle.load(classifier_f)
#classifier_f.close()

#print("NuSVC_classifier Algo accuracy:", (nltk.classify.accuracy(NuSVC_classifier, testing_set))*100)

voted_classifier = VoteClassifier(classifier,MNB_classifier,BernouliNB_classifier,LogisticRegression_classifier,SGDClassifier_classifier)
#print("voted_classifier Algo accuracy:", (nltk.classify.accuracy(voted_classifier, testing_set))*100)

def sentiment(text):
  feats = find_features(text)
  return voted_classifier.classify(feats)

from tweepy import Stream
from tweepy import OAuthHandler
from tweepy.streaming import StreamListener
import json


#consumer key, consumer secret, access token, access secret.
ckey="ODRuPu4vPYbwzEyI8g6sQu0Ml"
csecret="Wu8ICXzWDDqIZ6hzeOEzfbxQahPJTDg5H5sYutYwjoJr36qul1"
atoken="2463560340-y7yB38tiDaMfwNqR818bpWfNlDzb976pdB0nYkG"
asecret="0hpLgdbZBHYHMQSha7e4YSNCQi7Kka0nuv1Z9oWjn91DZ"

#API key ODRuPu4vPYbwzEyI8g6sQu0Ml
#API Key Secret Wu8ICXzWDDqIZ6hzeOEzfbxQahPJTDg5H5sYutYwjoJr36qul1
# Bearer Token AAAAAAAAAAAAAAAAAAAAAA8NTwEAAAAAba%2BS0JAwoXpSKGVDuGH71rkICV4%3DNG4SxaCO7f1LLEquTH133nQd6e7gVqBl7zdj8rUu8EDB6WdfUu

class listener(StreamListener):

    def on_data(self, data):
        all_data = json.loads(data)

        tweet = all_data["text"]

        sentiment_value,confidence = sentiment(tweet)

        print((tweet))

        print(sentiment_value, confidence)

        if confidence >= 0.8:
          output = open("twitter-out.txt","a")
          output.write(sentiment_value)
          output.write("\n")
          output.close()

        return True

    def on_error(self, status):
        print(status)

auth = OAuthHandler(ckey, csecret)
auth.set_access_token(atoken, asecret)

twitterStream = Stream(auth, listener())
twitterStream.filter(track=["Great"])

"""Tutorial 21"""

#Tutorial 21
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import time
from matplotlib import style

style.use("ggplot")

fig = plt.figure()
ax1 = fig.add_subplot(1,1,1)

def animate(i):
    pullData = open("twitter-out.txt","r").read()
    lines = pullData.split("\n")
    xar =[]
    yar = []

    x = 0
    y = 0

    for l in lines:
      x = x + 1
      if "pos" in l:
        y = y + 1
      elif "neg" in l:
        y = y - 1

      xar.append(x)
      yar.append(y)
      
    ax1.clear()
    ax1.plot(xar,yar)
ani = animation.FuncAnimation(fig, animate, interval=1000)
plt.show()

"""Compleate and cleaned code."""

# Commented out IPython magic to ensure Python compatibility.
import nltk
import sklearn
import matplotlib
import matplotlib.pyplot as plt
matplotlib.use('Agg')
import numpy as np
# if using a Jupyter notebook, include:
# %matplotlib inline

nltk.download()

import nltk
import random
from nltk.corpus import movie_reviews   #Already labeled data.
from nltk.classify.scikitlearn import SklearnClassifier 
import pickle
from google.colab import files

from sklearn.naive_bayes import MultinomialNB, GaussianNB, BernoulliNB

from sklearn.linear_model import LogisticRegression, SGDClassifier
from sklearn.svm import SVC, LinearSVC, NuSVC

from nltk.classify import ClassifierI
from statistics import mode

from nltk.tokenize import word_tokenize
import io

class VoteClassifier(ClassifierI):
  def __init__(self, *classifiers):
    self._classifiers = classifiers

  def classify(self, features):
    votes = []
    for c in self._classifiers:
      v = c.classify(features)
      votes.append(v)
    
    votes = []
    for c in self._classifiers:
      v = c.classify(features)
      votes.append(v)
    
    choice_votes = votes.count(mode(votes))
    conf = choice_votes / len(votes)

    return mode(votes),conf

  def confidence(self, features):
    votes = []
    for c in self._classifiers:
      v = c.classify(features)
      votes.append(v)
    
    choice_votes = votes.count(mode(votes))
    conf = choice_votes / len(votes)
    return conf


short_pos = io.open("positive.txt", encoding='latin-1').read()
short_neg = io.open("negative.txt", encoding='latin-1').read()

documents = []
all_words = []

#j  is adject, r is adverb, and v is verb
#allowed_word_types = ["J","R","V"]
allowed_word_types = ["J"]

for p in short_pos.split('\n'):
  documents.append((p,"pos"))
  words = word_tokenize(p)
  pos = nltk.pos_tag(words)
  for w in pos:
    if w[1][0] in allowed_word_types:
      all_words.append(w[0].lower())

for p in short_neg.split('\n'):
  documents.append((p,"neg"))
  words = word_tokenize(p)
  neg = nltk.pos_tag(words)
  for w in neg:
    if w[1][0] in allowed_word_types:
      all_words.append(w[0].lower())


all_words = nltk.FreqDist(all_words)

word_features = list(all_words.keys())[:5000]

def find_features(document):
  words = word_tokenize(document)
  features = {}
  for w in word_features:
    features[w] = (w
     in words)
    # If the word is in the top 5000 this will be true if not false.
  return features


featuresets = [(find_features(rev), category) for (rev, category) in documents]

random.shuffle(featuresets)

#Separate training and testing set.

training_set = featuresets[:10000]
testing_set = featuresets[10000:] 


classifier_f = open("naivebayes.pickle","rb")
classifier = pickle.load(classifier_f)
classifier_f.close()

print("Original Naive Bayes Algo accuracy:", (nltk.classify.accuracy(classifier, testing_set))*100)
classifier.show_most_informative_features(15)


classifier_f = open("MNB_classifier.pickle","rb")
MNB_classifier = pickle.load(classifier_f)
classifier_f.close()

print("MNB_classifier Algo accuracy:", (nltk.classify.accuracy(MNB_classifier, testing_set))*100)

classifier_f = open("BernouliNB_classifier.pickle","rb")
BernouliNB_classifier = pickle.load(classifier_f)
classifier_f.close()

print("BernouliNB_classifier Algo accuracy:", (nltk.classify.accuracy(BernouliNB_classifier, testing_set))*100)


classifier_f = open("LogisticRegression_classifier.pickle","rb")
LogisticRegression_classifier = pickle.load(classifier_f)
classifier_f.close()

print("LogisticRegression_classifier Algo accuracy:", (nltk.classify.accuracy(LogisticRegression_classifier, testing_set))*100)

classifier_f = open("SGDClassifier_classifier.pickle","rb")
SGDClassifier_classifier = pickle.load(classifier_f)
classifier_f.close()

print("SGDClassifier_classifier Algo accuracy:", (nltk.classify.accuracy(SGDClassifier_classifier, testing_set))*100)


classifier_f = open("LinearSVC_classifier.pickle","rb")
LinearSVC_classifier = pickle.load(classifier_f)
classifier_f.close()

print("LinearSVC_classifier Algo accuracy:", (nltk.classify.accuracy(LinearSVC_classifier, testing_set))*100)


voted_classifier = VoteClassifier(classifier,MNB_classifier,BernouliNB_classifier,LogisticRegression_classifier,SGDClassifier_classifier)

def sentiment(text):
  feats = find_features(text)
  return voted_classifier.classify(feats)

from tweepy import Stream
from tweepy import OAuthHandler
from tweepy.streaming import StreamListener
import json


#consumer key, consumer secret, access token, access secret.
ckey="ODRuPu4vPYbwzEyI8g6sQu0Ml"
csecret="Wu8ICXzWDDqIZ6hzeOEzfbxQahPJTDg5H5sYutYwjoJr36qul1"
atoken="2463560340-y7yB38tiDaMfwNqR818bpWfNlDzb976pdB0nYkG"
asecret="0hpLgdbZBHYHMQSha7e4YSNCQi7Kka0nuv1Z9oWjn91DZ"

#API key ODRuPu4vPYbwzEyI8g6sQu0Ml
#API Key Secret Wu8ICXzWDDqIZ6hzeOEzfbxQahPJTDg5H5sYutYwjoJr36qul1
# Bearer Token AAAAAAAAAAAAAAAAAAAAAA8NTwEAAAAAba%2BS0JAwoXpSKGVDuGH71rkICV4%3DNG4SxaCO7f1LLEquTH133nQd6e7gVqBl7zdj8rUu8EDB6WdfUu

class listener(StreamListener):

    def on_data(self, data):
        all_data = json.loads(data)

        tweet = all_data["text"]

        sentiment_value,confidence = sentiment(tweet)

        print((tweet))

        print(sentiment_value, confidence)

        if confidence >= 0.8:
          output = open("twitter-out.txt","a")
          output.write(sentiment_value)
          output.write("\n")
          output.close()

        return True

    def on_error(self, status):
        print(status)

auth = OAuthHandler(ckey, csecret)
auth.set_access_token(atoken, asecret)

twitterStream = Stream(auth, listener())
twitterStream.filter(track=["Amazing"])

import matplotlib.pyplot as plt
import matplotlib.animation as animation
import time
from matplotlib import style

style.use("ggplot")

fig = plt.figure()
ax1 = fig.add_subplot(1,1,1)

def animate(i):
    pullData = open("twitter-out.txt","r").read()
    lines = pullData.split("\n")
    xar =[]
    yar = []

    x = 0
    y = 0

    for l in lines:
      x = x + 1
      if "pos" in l:
        y = y + 1
      elif "neg" in l:
        y = y - 1

      xar.append(x)
      yar.append(y)
      
    ax1.clear()
    ax1.plot(xar,yar)
ani = animation.FuncAnimation(fig, animate, interval=1000)
plt.show()

""" # Get User posts from reddit"""

!pip install praw

import re
import praw

reddit = praw.Reddit(
    client_id="3Uv41wxzJSSSKfctoVNJPg",
    client_secret= "PD_4hfpWfRefToL5l58W2Chf5po_zA",
    user_agent="linux:nlp:v1.0.0 (by /u/zecsibagel)",
)

def get_posts(user):
  redditor = reddit.redditor(user)
  submissions = redditor.submissions.new(limit=100)
  posts = []
  for sub in submissions:
      processedtext = re.sub(r'\[(?P<word>.*?)\].*?\)', '\g<word>', sub.selftext)
      processedtext = re.sub(r'r\/(?P<subr>\w*)', '\g<subr>', processedtext)
      processedtext = re.sub(r'u\/(?P<subr>\w*)', '', processedtext)
      posts.append(processedtext)
  return posts

user = input("Insert user to get posts from: ")
posts = get_posts(user)
posts

pip freeze > requirements.txt

