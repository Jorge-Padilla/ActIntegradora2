# -*- coding: utf-8 -*-
"""ActividadIntegradora3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GB5i7TnFBCzdWlAfaOg_59xP0vl1kvzX

# Act integradora 2
"""

# Commented out IPython magic to ensure Python compatibility.
import nltk
import sklearn
import matplotlib
import matplotlib.pyplot as plt
matplotlib.use('Agg')
import numpy as np
# if using a Jupyter notebook, include:
# %matplotlib inline

"""Tutorial 1"""



nltk.download()

# tokenizing - word tokenizers ... sentence tokenizers . Separate by words ... separate by sentences.
# lexicon and corporas. 
# corporas - body of text all around the same thing.
# lexicon - words and their meanings.

from nltk.tokenize import sent_tokenize, word_tokenize

example_text = "Hello Mr. Smith, how are you doing today? The wheater is great and Python is awesome. The sky is pinish-blue. You should not eat cardboard."


print(sent_tokenize(example_text))
print(word_tokenize(example_text))

for i in word_tokenize(example_text):
  print(i)

"""Tutorial 2"""

#Stop words. Palabras que no importan, que no tienen significado. Para data analysis no importan.

from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize

example_sentence = "This is an example showing off stop world filtration."
stop_words = set(stopwords.words("english"))
#print(stop_words)

words = word_tokenize(example_sentence)

filtered_sentence = []

for w in words:
  if w not in stop_words:
    filtered_sentence.append(w)
  
print(filtered_sentence)

#fileterd_sentence = [w for w in fords if not w in stop_words]

"""Tutorial 3"""

#Steming - A form of data pre processing, take de root stem of the word
# Esto se hace porque muchas veces se tienen diferentes variaciones de las palabras pero significan lo mismo. 
#Porterstemer Algoritmo para hacer stem. 

from nltk.stem import PorterStemmer
from nltk.tokenize import word_tokenize

ps = PorterStemmer()

example_words = ["phyton","phytoner","phytoning","phytoned","phytonly"]

#for w in example_words:
# print(ps.stem(w))

new_text = "It is very important to be pythonly while you are pythoning with phyton. All phytoners have pythoned poorly at least once."

words = word_tokenize(new_text)

for w in words:
  print(ps.stem(w))

"""Tutorial 4"""

#Part of speech taging. Pre processing. Labeling the part of speech in every single word. 

from nltk.corpus import state_union
from nltk.tokenize import PunktSentenceTokenizer #Unsupervised ML sentence tokenizer. Ya esta pre entrenado

train_text = state_union.raw("2005-GWBush.txt")
sample_text = state_union.raw("2006-GWBush.txt")

custom_sent_tokenizer = PunktSentenceTokenizer(train_text)

tokenized = custom_sent_tokenizer.tokenize(sample_text)

def process_content():
  try:
    for i in tokenized:
      words = nltk.word_tokenize(i)
      tagged = nltk.pos_tag(words)

      print(tagged)
  except Exception as e:
    print(str(e))

process_content()  #Creates touple, of the word and then the part of speech.

"""Tutorial 5"""

#Chunking. 

#Part of speech taging. Pre processing. Labeling the part of speech in every single word. 

from nltk.corpus import state_union
from nltk.tokenize import PunktSentenceTokenizer #Unsupervised ML sentence tokenizer. Ya esta pre entrenado

train_text = state_union.raw("2005-GWBush.txt")
sample_text = state_union.raw("2006-GWBush.txt")

custom_sent_tokenizer = PunktSentenceTokenizer(train_text)

tokenized = custom_sent_tokenizer.tokenize(sample_text)

def process_content():
  try:
    for i in tokenized:
      words = nltk.word_tokenize(i)
      tagged = nltk.pos_tag(words)

      chunkGram = """Chunk: {<RB.?>*<VB.?>*<NNP>+<NN>?}"""  #RB is Any form of an adverb, we are looking for zero or more of these. VB is verb and NNP is proper noun. NN is a nown.
      
      chunkParser = nltk.RegexpParser(chunkGram)
      chunked = chunkParser.parse(tagged)

      print(chunked)


  except Exception as e:
    print(str(e))

process_content()  #Creates touple, of the word and then the part of speech.

"""Tutorial 6"""

from nltk.corpus import state_union
from nltk.tokenize import PunktSentenceTokenizer #Unsupervised ML sentence tokenizer. Ya esta pre entrenado

train_text = state_union.raw("2005-GWBush.txt")
sample_text = state_union.raw("2006-GWBush.txt")

custom_sent_tokenizer = PunktSentenceTokenizer(train_text)

tokenized = custom_sent_tokenizer.tokenize(sample_text)

def process_content():
  try:
    for i in tokenized[5:]:
      words = nltk.word_tokenize(i)
      tagged = nltk.pos_tag(words)

      chunkGram = """Chunk: {<.*>+}
                              }<VB.?|IN|DT|TO>+{"""  # Chunk everything except for verb, prepositions or determinators. 
      
      chunkParser = nltk.RegexpParser(chunkGram)
      chunked = chunkParser.parse(tagged)

      print(chunked)

  except Exception as e:
    print(str(e))

process_content()  #Creates touple, of the word and then the part of speech.

"""Tutorial 7"""

#named entity recognition.
from nltk.corpus import state_union
from nltk.tokenize import PunktSentenceTokenizer #Unsupervised ML sentence tokenizer. Ya esta pre entrenado

train_text = state_union.raw("2005-GWBush.txt")
sample_text = state_union.raw("2006-GWBush.txt")

custom_sent_tokenizer = PunktSentenceTokenizer(train_text)

tokenized = custom_sent_tokenizer.tokenize(sample_text)

def process_content():
  try:
    for i in tokenized[5:]:
      words = nltk.word_tokenize(i)
      tagged = nltk.pos_tag(words)

      namedEnt = nltk.ne_chunk(tagged, binary = True)
      print(namedEnt)

  except Exception as e:
    print(str(e))

process_content()  #Creates touple, of the word and then the part of speech.

"""Tutorial 8"""

# Lematizing Es una operacion similar a steamming, pero el resultado es una palabra, podría ser un sinonimo o la palabra original. 
# Es un poco mejor que stemming.
from nltk.stem import WordNetLemmatizer

lemmatizer = WordNetLemmatizer()

print(lemmatizer.lemmatize("cats"))
print(lemmatizer.lemmatize("cacti"))
print(lemmatizer.lemmatize("geese"))
print(lemmatizer.lemmatize("rocks"))
print(lemmatizer.lemmatize("phyton"))

print(lemmatizer.lemmatize("better",pos="a")) # A de adjetivo
print(lemmatizer.lemmatize("better")) # El valor default es pos = n que es de noun.
print(lemmatizer.lemmatize("best",pos="a"))
print(lemmatizer.lemmatize("run"))
print(lemmatizer.lemmatize("run",pos="v")) # V de verbo

"""Tutorial 9"""

# Tutorial 9
# Estre tutorial es sobre acceder a los archivos de corpus, ahí hay información muy valiosa que se puede utilizar para entrenar. 
import nltk
from nltk.corpus import gutenberg
from nltk.tokenize import sent_tokenize

print(nltk.__file__)
sample = gutenberg.raw("bible-kjv.txt")

tok = sent_tokenize(sample)

print(tok[5:15])

"""Tutorial 10"""

#Tutorial 10
# Word Net is one of the larges capability corpora in nltk.
from nltk.corpus import wordnet

syns = wordnet.synsets("program")
print(syns[0].name()) #Synset
print(syns[0].lemmas()[0].name()) # Just the word

#definition
print(syns[0].definition())

#examples 
print(syns[0].examples())

synonyms = []
antonyms = []

for syn in wordnet.synsets("good"):
  for l in syn.lemmas():
    #print("l:",l)
    synonyms.append(l.name())
    if l.antonyms():
      antonyms.append(l.antonyms()[0].name())

print(set(synonyms))
print(set(antonyms))

#Compare the similarity between these two words, the semantic similarity.

w1 = wordnet.synset("ship.n.01")
w2 = wordnet.synset("boat.n.01")

print("similarity: ", w1.wup_similarity(w2))

w1 = wordnet.synset("ship.n.01")
w2 = wordnet.synset("car.n.01")

print("similarity: ", w1.wup_similarity(w2))

w1 = wordnet.synset("ship.n.01")
w2 = wordnet.synset("cat.n.01")

print("similarity: ", w1.wup_similarity(w2))

w1 = wordnet.synset("ship.n.01")
w2 = wordnet.synset("cactus.n.01")

print("similarity: ", w1.wup_similarity(w2))

"""Tutorial 11"""

#Tutorial 11
# Start creating the text classifier for sentiment analysis. This could be done for economics, politics, that kind of things. 
# Our classifier will say if something is positive or something is negative. 
# Our method could be applied to any binary classifier. 

import nltk
import random
from nltk.corpus import movie_reviews   #Already labeled data. 

documents = [(list(movie_reviews.words(fileid)), category)
              for category in movie_reviews.categories()
              for fileid in movie_reviews.fileids(category)]


random.shuffle(documents)

#print(documents[1])

all_words = []
for w in movie_reviews.words():
  all_words.append(w.lower())

all_words = nltk.FreqDist(all_words)

print(all_words.most_common(15))

print(all_words["stupid"])

"""Tutorial 12

"""

#Tutorial 12
# Start creating the text classifier for sentiment analysis. This could be done for economics, politics, that kind of things. 
# Our classifier will say if something is positive or something is negative. 
# Our method could be applied to any binary classifier. 

import nltk
import random
from nltk.corpus import movie_reviews   #Already labeled data. 

documents = [(list(movie_reviews.words(fileid)), category)
              for category in movie_reviews.categories()
              for fileid in movie_reviews.fileids(category)]


random.shuffle(documents)

#print(documents[1])

all_words = []
for w in movie_reviews.words():
  all_words.append(w.lower())

all_words = nltk.FreqDist(all_words)

#print(all_words.most_common(15))
#print(all_words["stupid"])

word_features = list(all_words.keys())[:3000]

def find_features(document):
  words = set(document)
  features = {}
  for w in word_features:
    features[w] = (w in words)
    # If the word is in the top 3000 this will be true if not false.
  return features

print((find_features(movie_reviews.words('neg/cv000_29416.txt'))))

featuresets = [(find_features(rev), category) for (rev, category) in documents]

"""Tutorial 13

"""

# Tutorial 13
# Using Naive Bayes to clasify as positive or negative.
# Start creating the text classifier for sentiment analysis. This could be done for economics, politics, that kind of things. 
# Our classifier will say if something is positive or something is negative. 
# Our method could be applied to any binary classifier. 

import nltk
import random
from nltk.corpus import movie_reviews   #Already labeled data. 

documents = [(list(movie_reviews.words(fileid)), category)
              for category in movie_reviews.categories()
              for fileid in movie_reviews.fileids(category)]


random.shuffle(documents)

#print(documents[1])

all_words = []
for w in movie_reviews.words():
  all_words.append(w.lower())

all_words = nltk.FreqDist(all_words)

#print(all_words.most_common(15))
#print(all_words["stupid"])

word_features = list(all_words.keys())[:3000]

def find_features(document):
  words = set(document)
  features = {}
  for w in word_features:
    features[w] = (w in words)
    # If the word is in the top 3000 this will be true if not false.
  return features

#print((find_features(movie_reviews.words('neg/cv000_29416.txt'))))

featuresets = [(find_features(rev), category) for (rev, category) in documents]

#Separate training and testing set.
training_set = featuresets[:1900]
testing_set = featuresets[1900:]

# Bayes algorithm.  posterior = prior occurences x liklihood / evidence. 

classifier = nltk.NaiveBayesClassifier.train(training_set)

print("Naive Bayes Algo accuracy:", (nltk.classify.accuracy(classifier, testing_set))*100)
classifier.show_most_informative_features(15)

"""Tutorial 14"""

# Tutorial 14
# Pickle, save the trained algorithm so every time we want to use it we do not have to go and re train it. 


import nltk
import random
from nltk.corpus import movie_reviews   #Already labeled data. 
import pickle


documents = [(list(movie_reviews.words(fileid)), category)
              for category in movie_reviews.categories()
              for fileid in movie_reviews.fileids(category)]


random.shuffle(documents)

#print(documents[1])

all_words = []
for w in movie_reviews.words():
  all_words.append(w.lower())

all_words = nltk.FreqDist(all_words)

#print(all_words.most_common(15))
#print(all_words["stupid"])

word_features = list(all_words.keys())[:3000]

def find_features(document):
  words = set(document)
  features = {}
  for w in word_features:
    features[w] = (w in words)
    # If the word is in the top 3000 this will be true if not false.
  return features

#print((find_features(movie_reviews.words('neg/cv000_29416.txt'))))

featuresets = [(find_features(rev), category) for (rev, category) in documents]

#Separate training and testing set.
training_set = featuresets[:1900]
testing_set = featuresets[1900:]

# Bayes algorithm.  posterior = prior occurences x liklihood / evidence. 

classifier = nltk.NaiveBayesClassifier.train(training_set) # I could comment this but the saved filed is in only in my computer. 

save_classifier = open("naivebayes.pickle","wb")
pickle.dump(classifier, save_classifier) #What do we want to save, where do we want to save it. 
save_classifier.close()

classifier_f = open("naivebayes.pickle","rb")
classifier = pickle.load(classifier_f)
classifier_f.close()

print("Naive Bayes Algo accuracy:", (nltk.classify.accuracy(classifier, testing_set))*100)
classifier.show_most_informative_features(15)



"""Tutorial 15"""

# Tutorial 15
#Nltk is a Natural Language Toolkit, not ML
#Scikit is ML.

import nltk
import random
from nltk.corpus import movie_reviews   #Already labeled data.
from nltk.classify.scikitlearn import SklearnClassifier 
import pickle

from sklearn.naive_bayes import MultinomialNB, GaussianNB, BernoulliNB

from sklearn.linear_model import LogisticRegression, SGDClassifier
from sklearn.svm import SVC, LinearSVC, NuSVC

documents = [(list(movie_reviews.words(fileid)), category)
              for category in movie_reviews.categories()
              for fileid in movie_reviews.fileids(category)]


random.shuffle(documents)

#print(documents[1])

all_words = []
for w in movie_reviews.words():
  all_words.append(w.lower())

all_words = nltk.FreqDist(all_words)

#print(all_words.most_common(15))
#print(all_words["stupid"])

word_features = list(all_words.keys())[:3000]

def find_features(document):
  words = set(document)
  features = {}
  for w in word_features:
    features[w] = (w in words)
    # If the word is in the top 3000 this will be true if not false.
  return features

#print((find_features(movie_reviews.words('neg/cv000_29416.txt'))))

featuresets = [(find_features(rev), category) for (rev, category) in documents]

#Separate training and testing set.
training_set = featuresets[:1900]
testing_set = featuresets[1900:]

# Bayes algorithm.  posterior = prior occurences x liklihood / evidence. 

classifier_f = open("naivebayes.pickle","rb")
classifier = pickle.load(classifier_f)
classifier_f.close()

print("Original Naive Bayes Algo accuracy:", (nltk.classify.accuracy(classifier, testing_set))*100)
classifier.show_most_informative_features(15)

MNB_classifier = SklearnClassifier(MultinomialNB())
MNB_classifier.train(training_set)
print("MNB_classifier Algo accuracy:", (nltk.classify.accuracy(MNB_classifier, testing_set))*100)

#GaussianNB_classifier = SklearnClassifier(GaussianNB())
#GaussianNB_classifier.train(training_set)
#print("GaussianNB_classifier Algo accuracy:", (nltk.classify.accuracy(GaussianNB_classifier, testing_set))*100)

BernouliNB_classifier = SklearnClassifier(BernoulliNB())
BernouliNB_classifier.train(training_set)
print("BernouliNB_classifier Algo accuracy:", (nltk.classify.accuracy(BernouliNB_classifier, testing_set))*100)

#LogisticRegression, SGDClassifier
#SVC, LinearSVC, NuSVC

LogisticRegression_classifier = SklearnClassifier(LogisticRegression())
LogisticRegression_classifier.train(training_set)
print("LogisticRegression_classifier Algo accuracy:", (nltk.classify.accuracy(LogisticRegression_classifier, testing_set))*100)

SGDClassifier_classifier = SklearnClassifier(SGDClassifier())
SGDClassifier_classifier.train(training_set)
print("SGDClassifier_classifier Algo accuracy:", (nltk.classify.accuracy(SGDClassifier_classifier, testing_set))*100)

SVC_classifier = SklearnClassifier(SVC())
SVC_classifier.train(training_set)
print("SVC_classifier Algo accuracy:", (nltk.classify.accuracy(SVC_classifier, testing_set))*100)

LinearSVC_classifier = SklearnClassifier(LinearSVC())
LinearSVC_classifier.train(training_set)
print("LinearSVC_classifier Algo accuracy:", (nltk.classify.accuracy(LinearSVC_classifier, testing_set))*100)

NuSVC_classifier = SklearnClassifier(NuSVC())
NuSVC_classifier.train(training_set)
print("NuSVC_classifier Algo accuracy:", (nltk.classify.accuracy(NuSVC_classifier, testing_set))*100)

"""Tutorial 16"""

# Tutorial 16

from nltk.classify import ClassifierI
from statistics import mode

class VoteClassifier(ClassifierI):
  def __init__(self, *classifiers):
    self._classifiers = classifiers

  def classify(self, features):
    votes = []
    for c in self._classifiers:
      v = c.classify(features)
      votes.append(v)
    return mode(votes)

  def confidence(self, features):
    votes = []
    for c in self._classifiers:
      v = c.classify(features)
      votes.append(v)
    
    choice_votes = votes.count(mode(votes))
    conf = choice_votes / len(votes)
    return conf


print("Original Naive Bayes Algo accuracy:", (nltk.classify.accuracy(classifier, testing_set))*100)

MNB_classifier = SklearnClassifier(MultinomialNB())
MNB_classifier.train(training_set)
print("MNB_classifier Algo accuracy:", (nltk.classify.accuracy(MNB_classifier, testing_set))*100)


BernouliNB_classifier = SklearnClassifier(BernoulliNB())
BernouliNB_classifier.train(training_set)
print("BernouliNB_classifier Algo accuracy:", (nltk.classify.accuracy(BernouliNB_classifier, testing_set))*100)


LogisticRegression_classifier = SklearnClassifier(LogisticRegression())
LogisticRegression_classifier.train(training_set)
print("LogisticRegression_classifier Algo accuracy:", (nltk.classify.accuracy(LogisticRegression_classifier, testing_set))*100)

SGDClassifier_classifier = SklearnClassifier(SGDClassifier())
SGDClassifier_classifier.train(training_set)
print("SGDClassifier_classifier Algo accuracy:", (nltk.classify.accuracy(SGDClassifier_classifier, testing_set))*100)


LinearSVC_classifier = SklearnClassifier(LinearSVC())
LinearSVC_classifier.train(training_set)
print("LinearSVC_classifier Algo accuracy:", (nltk.classify.accuracy(LinearSVC_classifier, testing_set))*100)

NuSVC_classifier = SklearnClassifier(NuSVC())
NuSVC_classifier.train(training_set)
print("NuSVC_classifier Algo accuracy:", (nltk.classify.accuracy(NuSVC_classifier, testing_set))*100)



voted_classifier = VoteClassifier(classifier,MNB_classifier,BernouliNB_classifier,LogisticRegression_classifier,SGDClassifier_classifier,LinearSVC_classifier,NuSVC_classifier)
print("voted_classifier Algo accuracy:", (nltk.classify.accuracy(voted_classifier, testing_set))*100)

print("Classification:", voted_classifier.classify(testing_set[0][0]), "Confidence:", voted_classifier.confidence(testing_set[0][0]))

print("Classification:", voted_classifier.classify(testing_set[1][0]), "Confidence:", voted_classifier.confidence(testing_set[1][0]))
print("Classification:", voted_classifier.classify(testing_set[2][0]), "Confidence:", voted_classifier.confidence(testing_set[2][0]))
print("Classification:", voted_classifier.classify(testing_set[3][0]), "Confidence:", voted_classifier.confidence(testing_set[3][0]))
print("Classification:", voted_classifier.classify(testing_set[4][0]), "Confidence:", voted_classifier.confidence(testing_set[4][0]))
print("Classification:", voted_classifier.classify(testing_set[5][0]), "Confidence:", voted_classifier.confidence(testing_set[5][0]))

"""Tutorial 17"""

#Tutorial 17
# In this tutorial we will see how the algorithm behaves only analyzing positve data or negative data. See its distribution. 
import nltk
import random
from nltk.corpus import movie_reviews   #Already labeled data.
from nltk.classify.scikitlearn import SklearnClassifier 
import pickle

from sklearn.naive_bayes import MultinomialNB, GaussianNB, BernoulliNB

from sklearn.linear_model import LogisticRegression, SGDClassifier
from sklearn.svm import SVC, LinearSVC, NuSVC

from nltk.classify import ClassifierI
from statistics import mode

class VoteClassifier(ClassifierI):
  def __init__(self, *classifiers):
    self._classifiers = classifiers

  def classify(self, features):
    votes = []
    for c in self._classifiers:
      v = c.classify(features)
      votes.append(v)
    return mode(votes)

  def confidence(self, features):
    votes = []
    for c in self._classifiers:
      v = c.classify(features)
      votes.append(v)
    
    choice_votes = votes.count(mode(votes))
    conf = choice_votes / len(votes)
    return conf

documents = [(list(movie_reviews.words(fileid)), category)
              for category in movie_reviews.categories()
              for fileid in movie_reviews.fileids(category)]


#random.shuffle(documents) # Stop shuffling the data so whe know that the first thousand documents are negative and the second thousand docs are positive. 

#print(documents[1])

all_words = []
for w in movie_reviews.words():
  all_words.append(w.lower())

all_words = nltk.FreqDist(all_words)

#print(all_words.most_common(15))
#print(all_words["stupid"])

word_features = list(all_words.keys())[:3000]

def find_features(document):
  words = set(document)
  features = {}
  for w in word_features:
    features[w] = (w
     in words)
    # If the word is in the top 3000 this will be true if not false.
  return features

#print((find_features(movie_reviews.words('neg/cv000_29416.txt'))))

featuresets = [(find_features(rev), category) for (rev, category) in documents]

#Separate training and testing set.

#Positive Data Example:
#training_set = featuresets[:1900]
#testing_set = featuresets[1900:] #This will be all positive data. 

#Negative Data Example:
training_set = featuresets[100:]
testing_set = featuresets[:100] #This will be all negative data. 

# Bayes algorithm.  posterior = prior occurences x liklihood / evidence. 

classifier_f = open("naivebayes.pickle","rb")
classifier = pickle.load(classifier_f)
classifier_f.close()

print("Original Naive Bayes Algo accuracy:", (nltk.classify.accuracy(classifier, testing_set))*100)
classifier.show_most_informative_features(15)

MNB_classifier = SklearnClassifier(MultinomialNB())
MNB_classifier.train(training_set)
print("MNB_classifier Algo accuracy:", (nltk.classify.accuracy(MNB_classifier, testing_set))*100)

#GaussianNB_classifier = SklearnClassifier(GaussianNB())
#GaussianNB_classifier.train(training_set)
#print("GaussianNB_classifier Algo accuracy:", (nltk.classify.accuracy(GaussianNB_classifier, testing_set))*100)

BernouliNB_classifier = SklearnClassifier(BernoulliNB())
BernouliNB_classifier.train(training_set)
print("BernouliNB_classifier Algo accuracy:", (nltk.classify.accuracy(BernouliNB_classifier, testing_set))*100)

#LogisticRegression, SGDClassifier
#SVC, LinearSVC, NuSVC

LogisticRegression_classifier = SklearnClassifier(LogisticRegression())
LogisticRegression_classifier.train(training_set)
print("LogisticRegression_classifier Algo accuracy:", (nltk.classify.accuracy(LogisticRegression_classifier, testing_set))*100)

SGDClassifier_classifier = SklearnClassifier(SGDClassifier())
SGDClassifier_classifier.train(training_set)
print("SGDClassifier_classifier Algo accuracy:", (nltk.classify.accuracy(SGDClassifier_classifier, testing_set))*100)

SVC_classifier = SklearnClassifier(SVC())
SVC_classifier.train(training_set)
print("SVC_classifier Algo accuracy:", (nltk.classify.accuracy(SVC_classifier, testing_set))*100)

LinearSVC_classifier = SklearnClassifier(LinearSVC())
LinearSVC_classifier.train(training_set)
print("LinearSVC_classifier Algo accuracy:", (nltk.classify.accuracy(LinearSVC_classifier, testing_set))*100)

NuSVC_classifier = SklearnClassifier(NuSVC())
NuSVC_classifier.train(training_set)
print("NuSVC_classifier Algo accuracy:", (nltk.classify.accuracy(NuSVC_classifier, testing_set))*100)

voted_classifier = VoteClassifier(classifier,MNB_classifier,BernouliNB_classifier,LogisticRegression_classifier,SGDClassifier_classifier,LinearSVC_classifier,NuSVC_classifier)
print("voted_classifier Algo accuracy:", (nltk.classify.accuracy(voted_classifier, testing_set))*100)

print("Classification:", voted_classifier.classify(testing_set[0][0]), "Confidence:", voted_classifier.confidence(testing_set[0][0]))
print("Classification:", voted_classifier.classify(testing_set[1][0]), "Confidence:", voted_classifier.confidence(testing_set[1][0]))
print("Classification:", voted_classifier.classify(testing_set[2][0]), "Confidence:", voted_classifier.confidence(testing_set[2][0]))
print("Classification:", voted_classifier.classify(testing_set[3][0]), "Confidence:", voted_classifier.confidence(testing_set[3][0]))
print("Classification:", voted_classifier.classify(testing_set[4][0]), "Confidence:", voted_classifier.confidence(testing_set[4][0]))
print("Classification:", voted_classifier.classify(testing_set[5][0]), "Confidence:", voted_classifier.confidence(testing_set[5][0]))

"""Tutorial 18"""

#Tutorial 18
# In this tutorial we will be importing a new dataset. We will use a better training dataset for the purposes of our project, a data set with smaller blurbs of text.

import nltk
import random
from nltk.corpus import movie_reviews   #Already labeled data.
from nltk.classify.scikitlearn import SklearnClassifier 
import pickle
from google.colab import files

from sklearn.naive_bayes import MultinomialNB, GaussianNB, BernoulliNB

from sklearn.linear_model import LogisticRegression, SGDClassifier
from sklearn.svm import SVC, LinearSVC, NuSVC

from nltk.classify import ClassifierI
from statistics import mode

from nltk.tokenize import word_tokenize
import io

class VoteClassifier(ClassifierI):
  def __init__(self, *classifiers):
    self._classifiers = classifiers

  def classify(self, features):
    votes = []
    for c in self._classifiers:
      v = c.classify(features)
      votes.append(v)
    return mode(votes)

  def confidence(self, features):
    votes = []
    for c in self._classifiers:
      v = c.classify(features)
      votes.append(v)
    
    choice_votes = votes.count(mode(votes))
    conf = choice_votes / len(votes)
    return conf



short_pos = io.open("positive.txt", encoding='latin-1').read()
short_neg = io.open("negative.txt", encoding='latin-1').read()

documents = []

for r in short_pos.split('\n'):
  documents.append((r,"pos"))

for r in short_neg.split('\n'):
  documents.append((r,"neg")) 

all_words = []

short_pos_words = word_tokenize(short_pos)
short_neg_words = word_tokenize(short_neg)

for w in short_pos_words:
  all_words.append(w.lower())

for w in short_neg_words:
  all_words.append(w.lower())


all_words = nltk.FreqDist(all_words)

word_features = list(all_words.keys())[:5000]

def find_features(document):
  words = word_tokenize(document)
  features = {}
  for w in word_features:
    features[w] = (w
     in words)
    # If the word is in the top 3000 this will be true if not false.
  return features

#print((find_features(movie_reviews.words('neg/cv000_29416.txt'))))

featuresets = [(find_features(rev), category) for (rev, category) in documents]

random.shuffle(featuresets)

#Separate training and testing set.

training_set = featuresets[:10000]
testing_set = featuresets[10000:] 

# Bayes algorithm.  posterior = prior occurences x liklihood / evidence. 

classifier = nltk.NaiveBayesClassifier.train(training_set) 

save_classifier = open("naivebayes.pickle","wb")
pickle.dump(classifier, save_classifier) #What do we want to save, where do we want to save it. 
save_classifier.close()

classifier_f = open("naivebayes.pickle","rb")
classifier = pickle.load(classifier_f)
classifier_f.close()

print("Original Naive Bayes Algo accuracy:", (nltk.classify.accuracy(classifier, testing_set))*100)
classifier.show_most_informative_features(15)

MNB_classifier = SklearnClassifier(MultinomialNB())
MNB_classifier.train(training_set)

save_classifier = open("MNB_classifier.pickle","wb")
pickle.dump(MNB_classifier, save_classifier) #What do we want to save, where do we want to save it. 
save_classifier.close()

classifier_f = open("MNB_classifier.pickle","rb")
MNB_classifier = pickle.load(classifier_f)
classifier_f.close()

print("MNB_classifier Algo accuracy:", (nltk.classify.accuracy(MNB_classifier, testing_set))*100)

#GaussianNB_classifier = SklearnClassifier(GaussianNB())
#GaussianNB_classifier.train(training_set)
#print("GaussianNB_classifier Algo accuracy:", (nltk.classify.accuracy(GaussianNB_classifier, testing_set))*100)

BernouliNB_classifier = SklearnClassifier(BernoulliNB())
BernouliNB_classifier.train(training_set)
print("BernouliNB_classifier Algo accuracy:", (nltk.classify.accuracy(BernouliNB_classifier, testing_set))*100)

#LogisticRegression, SGDClassifier
#SVC, LinearSVC, NuSVC

LogisticRegression_classifier = SklearnClassifier(LogisticRegression())
LogisticRegression_classifier.train(training_set)
print("LogisticRegression_classifier Algo accuracy:", (nltk.classify.accuracy(LogisticRegression_classifier, testing_set))*100)

SGDClassifier_classifier = SklearnClassifier(SGDClassifier())
SGDClassifier_classifier.train(training_set)
print("SGDClassifier_classifier Algo accuracy:", (nltk.classify.accuracy(SGDClassifier_classifier, testing_set))*100)

SVC_classifier = SklearnClassifier(SVC())
SVC_classifier.train(training_set)
print("SVC_classifier Algo accuracy:", (nltk.classify.accuracy(SVC_classifier, testing_set))*100)

LinearSVC_classifier = SklearnClassifier(LinearSVC())
LinearSVC_classifier.train(training_set)
print("LinearSVC_classifier Algo accuracy:", (nltk.classify.accuracy(LinearSVC_classifier, testing_set))*100)

NuSVC_classifier = SklearnClassifier(NuSVC())
NuSVC_classifier.train(training_set)
print("NuSVC_classifier Algo accuracy:", (nltk.classify.accuracy(NuSVC_classifier, testing_set))*100)

voted_classifier = VoteClassifier(classifier,MNB_classifier,BernouliNB_classifier,LogisticRegression_classifier,SGDClassifier_classifier,LinearSVC_classifier,NuSVC_classifier)
print("voted_classifier Algo accuracy:", (nltk.classify.accuracy(voted_classifier, testing_set))*100)

print("Classification:", voted_classifier.classify(testing_set[0][0]), "Confidence:", voted_classifier.confidence(testing_set[0][0]))
print("Classification:", voted_classifier.classify(testing_set[1][0]), "Confidence:", voted_classifier.confidence(testing_set[1][0]))
print("Classification:", voted_classifier.classify(testing_set[2][0]), "Confidence:", voted_classifier.confidence(testing_set[2][0]))
print("Classification:", voted_classifier.classify(testing_set[3][0]), "Confidence:", voted_classifier.confidence(testing_set[3][0]))
print("Classification:", voted_classifier.classify(testing_set[4][0]), "Confidence:", voted_classifier.confidence(testing_set[4][0]))
print("Classification:", voted_classifier.classify(testing_set[5][0]), "Confidence:", voted_classifier.confidence(testing_set[5][0]))

"""Tutorial 19"""

#Tutorial 19
import nltk
import random
from nltk.corpus import movie_reviews   #Already labeled data.
from nltk.classify.scikitlearn import SklearnClassifier 
import pickle
from google.colab import files

from sklearn.naive_bayes import MultinomialNB, GaussianNB, BernoulliNB

from sklearn.linear_model import LogisticRegression, SGDClassifier
from sklearn.svm import SVC, LinearSVC, NuSVC

from nltk.classify import ClassifierI
from statistics import mode

from nltk.tokenize import word_tokenize
import io

class VoteClassifier(ClassifierI):
  def __init__(self, *classifiers):
    self._classifiers = classifiers

  def classify(self, features):
    votes = []
    for c in self._classifiers:
      v = c.classify(features)
      votes.append(v)
    return mode(votes)

  def confidence(self, features):
    votes = []
    for c in self._classifiers:
      v = c.classify(features)
      votes.append(v)
    
    choice_votes = votes.count(mode(votes))
    conf = choice_votes / len(votes)
    return conf



short_pos = io.open("positive.txt", encoding='latin-1').read()
short_neg = io.open("negative.txt", encoding='latin-1').read()

documents = []
all_words = []

#j  is adject, r is adverb, and v is verb
#allowed_word_types = ["J","R","V"]
allowed_word_types = ["J"]

for p in short_pos.split('\n'):
  documents.append((p,"pos"))
  words = word_tokenize(p)
  pos = nltk.pos_tag(words)
  for w in pos:
    if w[1][0] in allowed_word_types:
      all_words.append(w[0].lower())

for p in short_neg.split('\n'):
  documents.append((p,"neg"))
  words = word_tokenize(p)
  neg = nltk.pos_tag(words)
  for w in neg:
    if w[1][0] in allowed_word_types:
      all_words.append(w[0].lower())




all_words = nltk.FreqDist(all_words)

word_features = list(all_words.keys())[:5000]

def find_features(document):
  words = word_tokenize(document)
  features = {}
  for w in word_features:
    features[w] = (w
     in words)
    # If the word is in the top 3000 this will be true if not false.
  return features

#print((find_features(movie_reviews.words('neg/cv000_29416.txt'))))

featuresets = [(find_features(rev), category) for (rev, category) in documents]

random.shuffle(featuresets)

#Separate training and testing set.

training_set = featuresets[:10000]
testing_set = featuresets[10000:] 

# Bayes algorithm.  posterior = prior occurences x liklihood / evidence. 

classifier = nltk.NaiveBayesClassifier.train(training_set) 

save_classifier = open("naivebayes.pickle","wb")
pickle.dump(classifier, save_classifier) #What do we want to save, where do we want to save it. 
save_classifier.close()

classifier_f = open("naivebayes.pickle","rb")
classifier = pickle.load(classifier_f)
classifier_f.close()

print("Original Naive Bayes Algo accuracy:", (nltk.classify.accuracy(classifier, testing_set))*100)
classifier.show_most_informative_features(15)

MNB_classifier = SklearnClassifier(MultinomialNB())
MNB_classifier.train(training_set)

save_classifier = open("MNB_classifier.pickle","wb")
pickle.dump(MNB_classifier, save_classifier) #What do we want to save, where do we want to save it. 
save_classifier.close()

classifier_f = open("MNB_classifier.pickle","rb")
MNB_classifier = pickle.load(classifier_f)
classifier_f.close()

print("MNB_classifier Algo accuracy:", (nltk.classify.accuracy(MNB_classifier, testing_set))*100)

#GaussianNB_classifier = SklearnClassifier(GaussianNB())
#GaussianNB_classifier.train(training_set)
#print("GaussianNB_classifier Algo accuracy:", (nltk.classify.accuracy(GaussianNB_classifier, testing_set))*100)

BernouliNB_classifier = SklearnClassifier(BernoulliNB())
BernouliNB_classifier.train(training_set)

save_classifier = open("BernouliNB_classifier.pickle","wb")
pickle.dump(BernouliNB_classifier, save_classifier) #What do we want to save, where do we want to save it. 
save_classifier.close()

classifier_f = open("BernouliNB_classifier.pickle","rb")
BernouliNB_classifier = pickle.load(classifier_f)
classifier_f.close()

print("BernouliNB_classifier Algo accuracy:", (nltk.classify.accuracy(BernouliNB_classifier, testing_set))*100)

#LogisticRegression, SGDClassifier
#SVC, LinearSVC, NuSVC

LogisticRegression_classifier = SklearnClassifier(LogisticRegression())
LogisticRegression_classifier.train(training_set)

save_classifier = open("LogisticRegression_classifier.pickle","wb")
pickle.dump(LogisticRegression_classifier, save_classifier) #What do we want to save, where do we want to save it. 
save_classifier.close()

classifier_f = open("LogisticRegression_classifier.pickle","rb")
LogisticRegression_classifier = pickle.load(classifier_f)
classifier_f.close()


print("LogisticRegression_classifier Algo accuracy:", (nltk.classify.accuracy(LogisticRegression_classifier, testing_set))*100)

SGDClassifier_classifier = SklearnClassifier(SGDClassifier())
SGDClassifier_classifier.train(training_set)

save_classifier = open("SGDClassifier_classifier.pickle","wb")
pickle.dump(SGDClassifier_classifier, save_classifier) #What do we want to save, where do we want to save it. 
save_classifier.close()

classifier_f = open("SGDClassifier_classifier.pickle","rb")
SGDClassifier_classifier = pickle.load(classifier_f)
classifier_f.close()

print("SGDClassifier_classifier Algo accuracy:", (nltk.classify.accuracy(SGDClassifier_classifier, testing_set))*100)

SVC_classifier = SklearnClassifier(SVC())
SVC_classifier.train(training_set)

save_classifier = open("SVC_classifier.pickle","wb")
pickle.dump(SVC_classifier, save_classifier) #What do we want to save, where do we want to save it. 
save_classifier.close()

classifier_f = open("SVC_classifier.pickle","rb")
SVC_classifier = pickle.load(classifier_f)
classifier_f.close()

print("SVC_classifier Algo accuracy:", (nltk.classify.accuracy(SVC_classifier, testing_set))*100)

LinearSVC_classifier = SklearnClassifier(LinearSVC())
LinearSVC_classifier.train(training_set)

save_classifier = open("LinearSVC_classifier.pickle","wb")
pickle.dump(LinearSVC_classifier, save_classifier) #What do we want to save, where do we want to save it. 
save_classifier.close()

classifier_f = open("LinearSVC_classifier.pickle","rb")
LinearSVC_classifier = pickle.load(classifier_f)
classifier_f.close()

print("LinearSVC_classifier Algo accuracy:", (nltk.classify.accuracy(LinearSVC_classifier, testing_set))*100)

#NuSVC_classifier = SklearnClassifier(NuSVC())
#NuSVC_classifier.train(training_set)

#save_classifier = open("NuSVC_classifier.pickle","wb")
#pickle.dump(NuSVC_classifier, save_classifier) #What do we want to save, where do we want to save it. 
#save_classifier.close()

#classifier_f = open("NuSVC_classifier.pickle","rb")
#NuSVC_classifier = pickle.load(classifier_f)
#classifier_f.close()

#print("NuSVC_classifier Algo accuracy:", (nltk.classify.accuracy(NuSVC_classifier, testing_set))*100)

voted_classifier = VoteClassifier(classifier,MNB_classifier,BernouliNB_classifier,LogisticRegression_classifier,SGDClassifier_classifier,LinearSVC_classifier,SVC_classifier)
print("voted_classifier Algo accuracy:", (nltk.classify.accuracy(voted_classifier, testing_set))*100)

def sentiment(text):
  feats = find_features(text)
  return voted_classifier.classify(feats)

# Same code but pickles already created
import nltk
import random
from nltk.corpus import movie_reviews   #Already labeled data.
from nltk.classify.scikitlearn import SklearnClassifier 
import pickle
from google.colab import files

from sklearn.naive_bayes import MultinomialNB, GaussianNB, BernoulliNB

from sklearn.linear_model import LogisticRegression, SGDClassifier
from sklearn.svm import SVC, LinearSVC, NuSVC

from nltk.classify import ClassifierI
from statistics import mode

from nltk.tokenize import word_tokenize
import io

class VoteClassifier(ClassifierI):
  def __init__(self, *classifiers):
    self._classifiers = classifiers

  def classify(self, features):
    votes = []
    for c in self._classifiers:
      v = c.classify(features)
      votes.append(v)
    return mode(votes)

  def confidence(self, features):
    votes = []
    for c in self._classifiers:
      v = c.classify(features)
      votes.append(v)
    
    choice_votes = votes.count(mode(votes))
    conf = choice_votes / len(votes)
    return conf



short_pos = io.open("positive.txt", encoding='latin-1').read()
short_neg = io.open("negative.txt", encoding='latin-1').read()

documents = []
all_words = []

#j  is adject, r is adverb, and v is verb
#allowed_word_types = ["J","R","V"]
allowed_word_types = ["J"]

for p in short_pos.split('\n'):
  documents.append((p,"pos"))
  words = word_tokenize(p)
  pos = nltk.pos_tag(words)
  for w in pos:
    if w[1][0] in allowed_word_types:
      all_words.append(w[0].lower())

for p in short_neg.split('\n'):
  documents.append((p,"neg"))
  words = word_tokenize(p)
  neg = nltk.pos_tag(words)
  for w in neg:
    if w[1][0] in allowed_word_types:
      all_words.append(w[0].lower())




all_words = nltk.FreqDist(all_words)

word_features = list(all_words.keys())[:5000]

def find_features(document):
  words = word_tokenize(document)
  features = {}
  for w in word_features:
    features[w] = (w
     in words)
    # If the word is in the top 5000 this will be true if not false.
  return features

#print((find_features(movie_reviews.words('neg/cv000_29416.txt'))))

featuresets = [(find_features(rev), category) for (rev, category) in documents]

random.shuffle(featuresets)

#Separate training and testing set.

training_set = featuresets[:10000]
testing_set = featuresets[10000:] 

# Bayes algorithm.  posterior = prior occurences x liklihood / evidence. 


classifier_f = open("naivebayes.pickle","rb")
classifier = pickle.load(classifier_f)
classifier_f.close()

print("Original Naive Bayes Algo accuracy:", (nltk.classify.accuracy(classifier, testing_set))*100)
classifier.show_most_informative_features(15)


classifier_f = open("MNB_classifier.pickle","rb")
MNB_classifier = pickle.load(classifier_f)
classifier_f.close()

print("MNB_classifier Algo accuracy:", (nltk.classify.accuracy(MNB_classifier, testing_set))*100)


classifier_f = open("BernouliNB_classifier.pickle","rb")
BernouliNB_classifier = pickle.load(classifier_f)
classifier_f.close()

print("BernouliNB_classifier Algo accuracy:", (nltk.classify.accuracy(BernouliNB_classifier, testing_set))*100)



classifier_f = open("LogisticRegression_classifier.pickle","rb")
LogisticRegression_classifier = pickle.load(classifier_f)
classifier_f.close()


print("LogisticRegression_classifier Algo accuracy:", (nltk.classify.accuracy(LogisticRegression_classifier, testing_set))*100)


classifier_f = open("SGDClassifier_classifier.pickle","rb")
SGDClassifier_classifier = pickle.load(classifier_f)
classifier_f.close()

print("SGDClassifier_classifier Algo accuracy:", (nltk.classify.accuracy(SGDClassifier_classifier, testing_set))*100)


#classifier_f = open("SVC_classifier.pickle","rb")
#SVC_classifier = pickle.load(classifier_f)
#classifier_f.close()

#print("SVC_classifier Algo accuracy:", (nltk.classify.accuracy(SVC_classifier, testing_set))*100)


classifier_f = open("LinearSVC_classifier.pickle","rb")
LinearSVC_classifier = pickle.load(classifier_f)
classifier_f.close()

print("LinearSVC_classifier Algo accuracy:", (nltk.classify.accuracy(LinearSVC_classifier, testing_set))*100)

#NuSVC_classifier = SklearnClassifier(NuSVC())
#NuSVC_classifier.train(training_set)

#save_classifier = open("NuSVC_classifier.pickle","wb")
#pickle.dump(NuSVC_classifier, save_classifier) #What do we want to save, where do we want to save it. 
#save_classifier.close()

#classifier_f = open("NuSVC_classifier.pickle","rb")
#NuSVC_classifier = pickle.load(classifier_f)
#classifier_f.close()

#print("NuSVC_classifier Algo accuracy:", (nltk.classify.accuracy(NuSVC_classifier, testing_set))*100)

voted_classifier = VoteClassifier(classifier,MNB_classifier,BernouliNB_classifier,LogisticRegression_classifier,SGDClassifier_classifier)
print("voted_classifier Algo accuracy:", (nltk.classify.accuracy(voted_classifier, testing_set))*100)

def sentiment(text):
  feats = find_features(text)
  return voted_classifier.classify(feats)

print(sentiment("This movie was great, one of the best movies I have ever seen"))
print(sentiment("This movie was horrible, not worth it"))

"""Tutorial 20"""

#Tutorial 20
import nltk
import random
from nltk.corpus import movie_reviews   #Already labeled data.
from nltk.classify.scikitlearn import SklearnClassifier 
import pickle
from google.colab import files

from sklearn.naive_bayes import MultinomialNB, GaussianNB, BernoulliNB

from sklearn.linear_model import LogisticRegression, SGDClassifier
from sklearn.svm import SVC, LinearSVC, NuSVC

from nltk.classify import ClassifierI
from statistics import mode

from nltk.tokenize import word_tokenize
import io

class VoteClassifier(ClassifierI):
  def __init__(self, *classifiers):
    self._classifiers = classifiers

  def classify(self, features):
    votes = []
    for c in self._classifiers:
      v = c.classify(features)
      votes.append(v)
    
    votes = []
    for c in self._classifiers:
      v = c.classify(features)
      votes.append(v)
    
    choice_votes = votes.count(mode(votes))
    conf = choice_votes / len(votes)

    return mode(votes),conf

  def confidence(self, features):
    votes = []
    for c in self._classifiers:
      v = c.classify(features)
      votes.append(v)
    
    choice_votes = votes.count(mode(votes))
    conf = choice_votes / len(votes)
    return conf



short_pos = io.open("positive.txt", encoding='latin-1').read()
short_neg = io.open("negative.txt", encoding='latin-1').read()

documents = []
all_words = []

#j  is adject, r is adverb, and v is verb
#allowed_word_types = ["J","R","V"]
allowed_word_types = ["J"]

for p in short_pos.split('\n'):
  documents.append((p,"pos"))
  words = word_tokenize(p)
  pos = nltk.pos_tag(words)
  for w in pos:
    if w[1][0] in allowed_word_types:
      all_words.append(w[0].lower())

for p in short_neg.split('\n'):
  documents.append((p,"neg"))
  words = word_tokenize(p)
  neg = nltk.pos_tag(words)
  for w in neg:
    if w[1][0] in allowed_word_types:
      all_words.append(w[0].lower())




all_words = nltk.FreqDist(all_words)

word_features = list(all_words.keys())[:5000]

def find_features(document):
  words = word_tokenize(document)
  features = {}
  for w in word_features:
    features[w] = (w
     in words)
    # If the word is in the top 5000 this will be true if not false.
  return features

#print((find_features(movie_reviews.words('neg/cv000_29416.txt'))))

featuresets = [(find_features(rev), category) for (rev, category) in documents]

random.shuffle(featuresets)

#Separate training and testing set.

training_set = featuresets[:10000]
testing_set = featuresets[10000:] 

# Bayes algorithm.  posterior = prior occurences x liklihood / evidence. 


classifier_f = open("naivebayes.pickle","rb")
classifier = pickle.load(classifier_f)
classifier_f.close()

print("Original Naive Bayes Algo accuracy:", (nltk.classify.accuracy(classifier, testing_set))*100)
classifier.show_most_informative_features(15)


classifier_f = open("MNB_classifier.pickle","rb")
MNB_classifier = pickle.load(classifier_f)
classifier_f.close()

print("MNB_classifier Algo accuracy:", (nltk.classify.accuracy(MNB_classifier, testing_set))*100)


classifier_f = open("BernouliNB_classifier.pickle","rb")
BernouliNB_classifier = pickle.load(classifier_f)
classifier_f.close()

print("BernouliNB_classifier Algo accuracy:", (nltk.classify.accuracy(BernouliNB_classifier, testing_set))*100)



classifier_f = open("LogisticRegression_classifier.pickle","rb")
LogisticRegression_classifier = pickle.load(classifier_f)
classifier_f.close()


print("LogisticRegression_classifier Algo accuracy:", (nltk.classify.accuracy(LogisticRegression_classifier, testing_set))*100)


classifier_f = open("SGDClassifier_classifier.pickle","rb")
SGDClassifier_classifier = pickle.load(classifier_f)
classifier_f.close()

print("SGDClassifier_classifier Algo accuracy:", (nltk.classify.accuracy(SGDClassifier_classifier, testing_set))*100)


#classifier_f = open("SVC_classifier.pickle","rb")
#SVC_classifier = pickle.load(classifier_f)
#classifier_f.close()

#print("SVC_classifier Algo accuracy:", (nltk.classify.accuracy(SVC_classifier, testing_set))*100)


classifier_f = open("LinearSVC_classifier.pickle","rb")
LinearSVC_classifier = pickle.load(classifier_f)
classifier_f.close()

print("LinearSVC_classifier Algo accuracy:", (nltk.classify.accuracy(LinearSVC_classifier, testing_set))*100)

#NuSVC_classifier = SklearnClassifier(NuSVC())
#NuSVC_classifier.train(training_set)

#save_classifier = open("NuSVC_classifier.pickle","wb")
#pickle.dump(NuSVC_classifier, save_classifier) #What do we want to save, where do we want to save it. 
#save_classifier.close()

#classifier_f = open("NuSVC_classifier.pickle","rb")
#NuSVC_classifier = pickle.load(classifier_f)
#classifier_f.close()

#print("NuSVC_classifier Algo accuracy:", (nltk.classify.accuracy(NuSVC_classifier, testing_set))*100)

voted_classifier = VoteClassifier(classifier,MNB_classifier,BernouliNB_classifier,LogisticRegression_classifier,SGDClassifier_classifier)
#print("voted_classifier Algo accuracy:", (nltk.classify.accuracy(voted_classifier, testing_set))*100)

def sentiment(text):
  feats = find_features(text)
  return voted_classifier.classify(feats)

from tweepy import Stream
from tweepy import OAuthHandler
from tweepy.streaming import StreamListener
import json


#consumer key, consumer secret, access token, access secret.
ckey="ODRuPu4vPYbwzEyI8g6sQu0Ml"
csecret="Wu8ICXzWDDqIZ6hzeOEzfbxQahPJTDg5H5sYutYwjoJr36qul1"
atoken="2463560340-y7yB38tiDaMfwNqR818bpWfNlDzb976pdB0nYkG"
asecret="0hpLgdbZBHYHMQSha7e4YSNCQi7Kka0nuv1Z9oWjn91DZ"

#API key ODRuPu4vPYbwzEyI8g6sQu0Ml
#API Key Secret Wu8ICXzWDDqIZ6hzeOEzfbxQahPJTDg5H5sYutYwjoJr36qul1
# Bearer Token AAAAAAAAAAAAAAAAAAAAAA8NTwEAAAAAba%2BS0JAwoXpSKGVDuGH71rkICV4%3DNG4SxaCO7f1LLEquTH133nQd6e7gVqBl7zdj8rUu8EDB6WdfUu

class listener(StreamListener):

    def on_data(self, data):
        all_data = json.loads(data)

        tweet = all_data["text"]

        sentiment_value,confidence = sentiment(tweet)

        print((tweet))

        print(sentiment_value, confidence)

        if confidence >= 0.8:
          output = open("twitter-out.txt","a")
          output.write(sentiment_value)
          output.write("\n")
          output.close()

        return True

    def on_error(self, status):
        print(status)

auth = OAuthHandler(ckey, csecret)
auth.set_access_token(atoken, asecret)

twitterStream = Stream(auth, listener())
twitterStream.filter(track=["Great"])

"""Tutorial 21"""

#Tutorial 21
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import time
from matplotlib import style

style.use("ggplot")

fig = plt.figure()
ax1 = fig.add_subplot(1,1,1)

def animate(i):
    pullData = open("twitter-out.txt","r").read()
    lines = pullData.split("\n")
    xar =[]
    yar = []

    x = 0
    y = 0

    for l in lines:
      x = x + 1
      if "pos" in l:
        y = y + 1
      elif "neg" in l:
        y = y - 1

      xar.append(x)
      yar.append(y)
      
    ax1.clear()
    ax1.plot(xar,yar)
ani = animation.FuncAnimation(fig, animate, interval=1000)
plt.show()

"""Compleate and cleaned code."""

# Commented out IPython magic to ensure Python compatibility.
import nltk
import sklearn
import matplotlib
import matplotlib.pyplot as plt
matplotlib.use('Agg')
import numpy as np
# if using a Jupyter notebook, include:
# %matplotlib inline

nltk.download()

import nltk
import random
from nltk.corpus import movie_reviews   #Already labeled data.
from nltk.classify.scikitlearn import SklearnClassifier 
import pickle
from google.colab import files

from sklearn.naive_bayes import MultinomialNB, GaussianNB, BernoulliNB

from sklearn.linear_model import LogisticRegression, SGDClassifier
from sklearn.svm import SVC, LinearSVC, NuSVC

from nltk.classify import ClassifierI
from statistics import mode

from nltk.tokenize import word_tokenize
import io

class VoteClassifier(ClassifierI):
  def __init__(self, *classifiers):
    self._classifiers = classifiers

  def classify(self, features):
    votes = []
    for c in self._classifiers:
      v = c.classify(features)
      votes.append(v)
    
    votes = []
    for c in self._classifiers:
      v = c.classify(features)
      votes.append(v)
    
    choice_votes = votes.count(mode(votes))
    conf = choice_votes / len(votes)

    return mode(votes),conf

  def confidence(self, features):
    votes = []
    for c in self._classifiers:
      v = c.classify(features)
      votes.append(v)
    
    choice_votes = votes.count(mode(votes))
    conf = choice_votes / len(votes)
    return conf


short_pos = io.open("positive.txt", encoding='latin-1').read()
short_neg = io.open("negative.txt", encoding='latin-1').read()

documents = []
all_words = []

#j  is adject, r is adverb, and v is verb
#allowed_word_types = ["J","R","V"]
allowed_word_types = ["J"]

for p in short_pos.split('\n'):
  documents.append((p,"pos"))
  words = word_tokenize(p)
  pos = nltk.pos_tag(words)
  for w in pos:
    if w[1][0] in allowed_word_types:
      all_words.append(w[0].lower())

for p in short_neg.split('\n'):
  documents.append((p,"neg"))
  words = word_tokenize(p)
  neg = nltk.pos_tag(words)
  for w in neg:
    if w[1][0] in allowed_word_types:
      all_words.append(w[0].lower())


all_words = nltk.FreqDist(all_words)

word_features = list(all_words.keys())[:5000]

def find_features(document):
  words = word_tokenize(document)
  features = {}
  for w in word_features:
    features[w] = (w
     in words)
    # If the word is in the top 5000 this will be true if not false.
  return features


featuresets = [(find_features(rev), category) for (rev, category) in documents]

random.shuffle(featuresets)

#Separate training and testing set.

training_set = featuresets[:10000]
testing_set = featuresets[10000:] 


classifier_f = open("naivebayes.pickle","rb")
classifier = pickle.load(classifier_f)
classifier_f.close()

print("Original Naive Bayes Algo accuracy:", (nltk.classify.accuracy(classifier, testing_set))*100)
classifier.show_most_informative_features(15)


classifier_f = open("MNB_classifier.pickle","rb")
MNB_classifier = pickle.load(classifier_f)
classifier_f.close()

print("MNB_classifier Algo accuracy:", (nltk.classify.accuracy(MNB_classifier, testing_set))*100)

classifier_f = open("BernouliNB_classifier.pickle","rb")
BernouliNB_classifier = pickle.load(classifier_f)
classifier_f.close()

print("BernouliNB_classifier Algo accuracy:", (nltk.classify.accuracy(BernouliNB_classifier, testing_set))*100)


classifier_f = open("LogisticRegression_classifier.pickle","rb")
LogisticRegression_classifier = pickle.load(classifier_f)
classifier_f.close()

print("LogisticRegression_classifier Algo accuracy:", (nltk.classify.accuracy(LogisticRegression_classifier, testing_set))*100)

classifier_f = open("SGDClassifier_classifier.pickle","rb")
SGDClassifier_classifier = pickle.load(classifier_f)
classifier_f.close()

print("SGDClassifier_classifier Algo accuracy:", (nltk.classify.accuracy(SGDClassifier_classifier, testing_set))*100)


classifier_f = open("LinearSVC_classifier.pickle","rb")
LinearSVC_classifier = pickle.load(classifier_f)
classifier_f.close()

print("LinearSVC_classifier Algo accuracy:", (nltk.classify.accuracy(LinearSVC_classifier, testing_set))*100)


voted_classifier = VoteClassifier(classifier,MNB_classifier,BernouliNB_classifier,LogisticRegression_classifier,SGDClassifier_classifier)

def sentiment(text):
  feats = find_features(text)
  return voted_classifier.classify(feats)

from tweepy import Stream
from tweepy import OAuthHandler
from tweepy.streaming import StreamListener
import json


#consumer key, consumer secret, access token, access secret.
ckey="ODRuPu4vPYbwzEyI8g6sQu0Ml"
csecret="Wu8ICXzWDDqIZ6hzeOEzfbxQahPJTDg5H5sYutYwjoJr36qul1"
atoken="2463560340-y7yB38tiDaMfwNqR818bpWfNlDzb976pdB0nYkG"
asecret="0hpLgdbZBHYHMQSha7e4YSNCQi7Kka0nuv1Z9oWjn91DZ"

#API key ODRuPu4vPYbwzEyI8g6sQu0Ml
#API Key Secret Wu8ICXzWDDqIZ6hzeOEzfbxQahPJTDg5H5sYutYwjoJr36qul1
# Bearer Token AAAAAAAAAAAAAAAAAAAAAA8NTwEAAAAAba%2BS0JAwoXpSKGVDuGH71rkICV4%3DNG4SxaCO7f1LLEquTH133nQd6e7gVqBl7zdj8rUu8EDB6WdfUu

class listener(StreamListener):

    def on_data(self, data):
        all_data = json.loads(data)

        tweet = all_data["text"]

        sentiment_value,confidence = sentiment(tweet)

        print((tweet))

        print(sentiment_value, confidence)

        if confidence >= 0.8:
          output = open("twitter-out.txt","a")
          output.write(sentiment_value)
          output.write("\n")
          output.close()

        return True

    def on_error(self, status):
        print(status)

auth = OAuthHandler(ckey, csecret)
auth.set_access_token(atoken, asecret)

twitterStream = Stream(auth, listener())
twitterStream.filter(track=["Amazing"])

import matplotlib.pyplot as plt
import matplotlib.animation as animation
import time
from matplotlib import style

style.use("ggplot")

fig = plt.figure()
ax1 = fig.add_subplot(1,1,1)

def animate(i):
    pullData = open("twitter-out.txt","r").read()
    lines = pullData.split("\n")
    xar =[]
    yar = []

    x = 0
    y = 0

    for l in lines:
      x = x + 1
      if "pos" in l:
        y = y + 1
      elif "neg" in l:
        y = y - 1

      xar.append(x)
      yar.append(y)
      
    ax1.clear()
    ax1.plot(xar,yar)
ani = animation.FuncAnimation(fig, animate, interval=1000)
plt.show()

"""# Act integradora 3

## Speech to text

### Install necessary packages
"""

!pip install SpeechRecognition

!apt install libasound2-dev portaudio19-dev libportaudio2 libportaudiocpp0 ffmpeg
!pip install pyaudio

"""### Function definition for audio recording"""

# all imports
from IPython.display import Javascript
from google.colab import output
from base64 import b64decode

RECORD = """
const sleep  = time => new Promise(resolve => setTimeout(resolve, time))
const b2text = blob => new Promise(resolve => {
  const reader = new FileReader()
  reader.onloadend = e => resolve(e.srcElement.result)
  reader.readAsDataURL(blob)
})
var record = time => new Promise(async resolve => {
  stream = await navigator.mediaDevices.getUserMedia({ audio: true })
  recorder = new MediaRecorder(stream)
  chunks = []
  recorder.ondataavailable = e => chunks.push(e.data)
  recorder.start()
  await sleep(time)
  recorder.onstop = async ()=>{
    blob = new Blob(chunks)
    text = await b2text(blob)
    resolve(text)
  }
  recorder.stop()
})
"""

def record_audio(sec=3):
  print('Recording started')
  display(Javascript(RECORD))
  print('Recording finished')
  s = output.eval_js('record(%d)' % (sec*1000))
  b = b64decode(s.split(',')[1])
  with open('audio.webm','wb') as f:
    f.write(b)
    f.close()
  return 'audio.webm'

"""### Recording audio and speech recognition"""

record_audio(10)

# the speech recognition module can only import wav files, and our function exports them as webm files
!ffmpeg -i "audio.webm" -vn "audio.wav"

import speech_recognition as sr
r = sr.Recognizer()

audio = sr.AudioFile('audio.wav')

with audio as source:
	audio = r.record(source)

	try:
		print('Text: ' + r.recognize_google(audio))
	except:
		print('Error in the API section')

"""## Search tweets by username"""

!pip install kaggle -q

!rm -rf /root/.kaggle

!mkdir /root/.kaggle

!mv kaggle.json /root/.kaggle/kaggle.json

!ls /root/.kaggle/kaggle.json

import json

!kaggle datasets download -d kazanova/sentiment140

!pip install tweepy

import tweepy
import json

consumer_key = "JTWH7ROERHbQQqNy6SgQrCqUB"
consumer_secret = "YzZwKD2vZFnFZvizZeQrrBXY8H5ofWWOzsqikznzupoF7xyVbq"
access_token = "2463560340-M78D7D6xujPhTsaMn9xCVF0AK5KTXm62HwTx9er"
access_token_secret = "LMqy7BahnQQUKVM9L2vm4JHNpDMT14DPhs5FHqnmBanuU"

auth = tweepy.OAuthHandler(consumer_key, consumer_secret)
auth.set_access_token(access_token, access_token_secret)

twitter = tweepy.API(auth)

resultados = twitter.search(q='AuthenticRust')
for tweet in resultados:
     print(f‘Usuario: {tweet.user.screen_name} - Tweet: {tweet.text}’)

"""## Get User posts from reddit"""

!pip install praw

import re
import praw

reddit = praw.Reddit(
    client_id="3Uv41wxzJSSSKfctoVNJPg",
    client_secret= "PD_4hfpWfRefToL5l58W2Chf5po_zA",
    user_agent="linux:nlp:v1.0.0 (by /u/zecsibagel)",
)

def get_posts(user):
  redditor = reddit.redditor(user)
  submissions = redditor.submissions.new(limit=100)
  posts = []
  for sub in submissions:
      processedtext = re.sub(r'\[(?P<word>.*?)\].*?\)', '\g<word>', sub.selftext)
      processedtext = re.sub(r'r\/(?P<subr>\w*)', '\g<subr>', processedtext)
      processedtext = re.sub(r'u\/(?P<subr>\w*)', '', processedtext)
      posts.append(processedtext)
  return posts

user = input("Insert user to get posts from: ")
posts = get_posts(user)
posts

"""## Adding 3 more Recurrent Neural Networks

### Basic RNN -> Short Term Memory Networks
"""

# -*- encoding: utf-8 -*-
import numpy as np

import matplotlib.pyplot as plt
import pandas as pd
from sklearn.model_selection import train_test_split
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation,Embedding,Flatten
from keras.layers import LSTM, Bidirectional
from keras.models import load_model, save_model
from matplotlib import pyplot
from keras.models import Model
from keras.preprocessing.text import text_to_word_sequence
from nltk.corpus import stopwords 
from nltk.tokenize import word_tokenize
from keras.preprocessing.text import Tokenizer
from keras.preprocessing.sequence import pad_sequences
import os
from keras.layers import Embedding,Flatten,Conv1D,MaxPooling1D
from keras.utils import np_utils
from sklearn.preprocessing import LabelEncoder
import sys
from keras.callbacks import ModelCheckpoint
import time
import datetime

import io
import random

short_pos = io.open("positive.txt", encoding='latin-1').read()
short_neg = io.open("negative.txt", encoding='latin-1').read()

documents = []
all_words = []

allowed_word_types = ["J"]

for p in short_pos.split('\n'):
  documents.append((p,"pos"))
  words = word_tokenize(p)
  pos = nltk.pos_tag(words)
  for w in pos:
    if w[1][0] in allowed_word_types:
      all_words.append(w[0].lower())

for p in short_neg.split('\n'):
  documents.append((p,"neg"))
  words = word_tokenize(p)
  neg = nltk.pos_tag(words)
  for w in neg:
    if w[1][0] in allowed_word_types:
      all_words.append(w[0].lower())

random.shuffle(documents)
x = []
y = []

for i in range(10000):
  x.append(documents[i][0])
  y.append(documents[i][1])

# ----------------------------Preprocessing Text Data---------------------------------------

stop_words = set(stopwords.words('english')) 
new_stop_words=set(stop_words)

# adding woudlnt type of words into stopwords list
for s in stop_words:
	new_stop_words.add(s.replace('\'',''))
	pass
	
stop_words=new_stop_words
print("Excluding stopwords ...")

# removing @ from default base filter, to remove that whole word, which might be considered as user or page name
base_filters='\n\t!"#$%&()*+,-./:;<=>?[\]^_`{|}~ '

word_sequences=[]

for i in x:
	i=str(i)
	i=i.replace('\'', '')
	newlist = [x for x in text_to_word_sequence(i,filters=base_filters, lower=True) if not x.startswith("@")]
	filtered_sentence = [w for w in newlist if not w in stop_words] 
	word_sequences.append(filtered_sentence)
	pass

tokenizer = Tokenizer()
tokenizer.fit_on_texts(word_sequences)
word_indices = tokenizer.texts_to_sequences(word_sequences)
word_index = tokenizer.word_index
print("Tokenized to Word indices as ")
print(np.array(word_indices).shape)

#padding word_indices
MAX_SEQUENCE_LENGTH = 200
x_data=pad_sequences(word_indices,maxlen=MAX_SEQUENCE_LENGTH)
print("After padding data")
print(x_data.shape)

# using pretrained glove vector
print("Loading Glove Vectors ...")

embeddings_index = {}
f = open(os.path.join('', 'glove.6B.50d.txt'),'r',encoding="utf-8")
for line in f:
    values = line.split()
    word = values[0]
    coefs = np.asarray(values[1:], dtype='float32')
    embeddings_index[word] = coefs
f.close()

print('Loaded GloVe Vectors Successfully')

EMBEDDING_DIM = 50

embedding_matrix = np.zeros((len(word_index) + 1, EMBEDDING_DIM))
for word, i in word_index.items():
    embedding_vector = embeddings_index.get(word)
    if embedding_vector is not None:
        # words not found in embedding index will be all-zeros.
        embedding_matrix[i] = embedding_vector

print("Embedding Matrix Generated : ",embedding_matrix.shape)

embedding_layer = Embedding(len(word_index) + 1,EMBEDDING_DIM, weights=[embedding_matrix],input_length=MAX_SEQUENCE_LENGTH,trainable=False)

label_encoder = LabelEncoder()
integer_encoded = label_encoder.fit_transform(y)
le_name_mapping = dict(zip(label_encoder.transform(label_encoder.classes_),label_encoder.classes_))
print("Label Encoding Classes as ")
print(le_name_mapping)

y_data=np_utils.to_categorical(integer_encoded)
print("One Hot Encoded class shape ")
print(y_data.shape)

#Building Model

model=Sequential()
model.add(embedding_layer)
model.add(Conv1D(30,1,activation="relu"))
model.add(MaxPooling1D(4))
model.add(LSTM(100,return_sequences=True))
model.add(Flatten())
model.add(Dense(500,activation='relu'))
model.add(Dense(300,activation='relu'))
model.add(Dense(y_data.shape[1],activation="softmax"))
model.compile(loss="categorical_crossentropy",optimizer="sgd",metrics=["accuracy"])
print(model.summary())

print("Finished Preprocessing data ...")
print("x_data shape : ",x_data.shape)
print("y_data shape : ",y_data.shape)

# spliting data into training, testing set
print("spliting data into training, testing set")
x_train,x_test,y_train,y_test=train_test_split(x_data,y_data)

st=datetime.datetime.fromtimestamp(time.time()).strftime('%Y-%m-%d %H:%M:%S')
# define the checkpoint
filepath="model_weights-improvement-{epoch:02d}-{val_accuracy:.6f}.hdf5"
checkpoint = ModelCheckpoint(filepath, monitor='val_accuracy', verbose=1, save_best_only=True, mode='max')
callbacks_list = [checkpoint]

history=model.fit(x_train, y_train, validation_data=(x_test, y_test), batch_size=100, epochs=10,callbacks=callbacks_list)

scores = model.evaluate(x_test, y_test, verbose=0)
print('Test accuracy:', scores[1])

pyplot.plot(history.history['accuracy'],label='Training Accuracy')
pyplot.plot(history.history['val_accuracy'],label='Validation Accuracy')

pyplot.legend()
pyplot.show()

"""### RNN GRU """

short_pos = io.open("positive.txt", encoding='latin-1').read()
short_neg = io.open("negative.txt", encoding='latin-1').read()

documents = []
all_words = []

allowed_word_types = ["J"]

for p in short_pos.split('\n'):
  documents.append((p,1))
  words = word_tokenize(p)
  pos = nltk.pos_tag(words)
  for w in pos:
    if w[1][0] in allowed_word_types:
      all_words.append(w[0].lower())

for p in short_neg.split('\n'):
  documents.append((p,0))
  words = word_tokenize(p)
  neg = nltk.pos_tag(words)
  for w in neg:
    if w[1][0] in allowed_word_types:
      all_words.append(w[0].lower())

random.shuffle(documents)
x_train = []
y_train = []
x_test = []
y_test = []

for i in range(9000):
  x_train.append(documents[i][0])
  y_train.append(documents[i][1])

for i in range(1000):
  x_test.append(documents[i+9000][0])
  y_test.append(documents[i+9000][1])

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 2.x

import tensorflow as tf

train_dataset = tf.data.Dataset.from_tensor_slices((x_train, y_train))
test_dataset = tf.data.Dataset.from_tensor_slices((x_test, y_test))

BUFFER_SIZE = 1000
BATCH_SIZE = 32

train_dataset = train_dataset.shuffle(BUFFER_SIZE).batch(BATCH_SIZE).prefetch(tf.data.experimental.AUTOTUNE)
test_dataset = test_dataset.batch(BATCH_SIZE).prefetch(tf.data.experimental.AUTOTUNE)

for example, label in train_dataset.take(1):
  print('texts: ', example.numpy()[:3])
  print()
  print('labels: ', label.numpy()[:3])

VOCAB_SIZE = 1000
encoder = tf.keras.layers.TextVectorization(
    max_tokens=VOCAB_SIZE)
encoder.adapt(train_dataset.map(lambda text, label: text))

vocab = np.array(encoder.get_vocabulary())
vocab[:20]

encoded_example = encoder(example)[:3].numpy()
encoded_example

for n in range(3):
  print("Original: ", example[n].numpy())
  print("Round-trip: ", " ".join(vocab[encoded_example[n]]))
  print()

"""### Creating the Model with GRU arquitecture"""

model = tf.keras.Sequential([
    encoder,
    tf.keras.layers.Embedding(
        input_dim=len(encoder.get_vocabulary()),
        output_dim=64,
        # Use masking to handle the variable sequence lengths
        mask_zero=True),
    tf.keras.layers.Bidirectional(tf.keras.layers.GRU(64)),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(1)
])

print([layer.supports_masking for layer in model.layers])

# predict on a sample text without padding.

sample_text = ('The movie was cool. The animation and the graphics '
               'were out of this world. I would recommend this movie.')
predictions = model.predict(np.array([sample_text]))
print(predictions[0])

# predict on a sample text with padding

padding = "the " * 2000
predictions = model.predict(np.array([sample_text, padding]))
print(predictions[0])

model.compile(loss=tf.keras.losses.BinaryCrossentropy(from_logits=True),
              optimizer=tf.keras.optimizers.Adam(1e-4),
              metrics=['accuracy'])

history = model.fit(train_dataset, epochs=5,
                    validation_data=test_dataset,
                    validation_steps=15)

test_loss, test_acc = model.evaluate(test_dataset)

print('Test Loss:', test_loss)
print('Test Accuracy:', test_acc)

pyplot.plot(history.history['accuracy'],label='Training Accuracy')
pyplot.plot(history.history['val_accuracy'],label='Validation Accuracy')

pyplot.legend()
pyplot.show()

"""### LSTM advanced and hybrid with GRU arquitecture."""

model_h = tf.keras.Sequential([
    encoder,
    tf.keras.layers.Embedding(
        input_dim=len(encoder.get_vocabulary()),
        output_dim=64,
        # Use masking to handle the variable sequence lengths
        mask_zero=True),
    tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(64)),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(32, activation='relu'),
    tf.keras.layers.Dense(1)
])

"""## More social networks

### Youtube comments
"""

from googleapiclient.discovery import build

api_key = 'AIzaSyBRyuQmutCWq4XkYRRgLLfwZrPtgtN2IvA'


def video_comments(video_id):
	# empty list for storing comments
	comments = []
	# creating youtube resource object
	youtube = build('youtube', 'v3', developerKey=api_key)

	# retrieve youtube video results
	video_response = youtube.commentThreads().list( part='snippet,replies', videoId=video_id).execute()
	print(video_response)

	# iterate video response
	while video_response or len(comments) < 100:

		# extracting required info
		# from each result object
		for item in video_response['items']:

			# Extracting comments
			comment = item['snippet']['topLevelComment']['snippet']['textDisplay']
			print(comment)
			comments.append(comment)

			# counting number of reply of comment
			replycount = item['snippet']['totalReplyCount']

			# if reply is there
			if replycount > 0:
				# iterate through all reply
				for reply in item['replies']['comments']:
						# Extract reply
						reply = reply['snippet']['textDisplay']

						# Store reply is list
						comments.append(reply)

		# Again repeat
		# if 'nextPageToken' in video_response:
		# 	video_response = youtube.commentThreads().list(
    #                 part='snippet,replies',
    #                 videoId=video_id
    #             ).execute()
		# else:
		# 	break

	print(comments)
	return comments



# Enter video id
video_id = "GMbn7JY9D1U"

# Call function
print(video_comments(video_id))

"""### Tumblr posts

#### Install necessary module, and import
"""

!pip install pytumblr

import pytumblr
import re

"""#### Retrieve posts from blog (user)"""

# Define the blog (kind of the same as an user) we want the posts from
print('You can try with the blog: catscafecomics')
blog = input('Blog (user) to get posts from: ')
post_caption = []
post_tags = []

# Authenticate via API Key
print('Authenticating')
client = pytumblr.TumblrRestClient('CoUbUxOO2XIFpqcHzS2iLSRaOjcnQjn0sdF5b6pLTCtlAJK7EH')

# Make the request, this will return the 50 most recent posts, latest first
print('Making request')
result = client.posts(blog, limit=2000, offset=0, reblog_info=True, notes_info=True, filter='html')

# Obtain the contents of the blog posts
print('Extracting data from request result')
html_tags = re.compile('<.*?>|&([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-f]{1,6});')
for post in result['posts']:
	if 'caption' in post:
		caption = post['caption']
		caption = re.sub(html_tags, ' ', caption)
		post_caption.append(caption)
	else:
		continue

	post_tags.append(post['tags'])

print("Retrieved posts with text content:", len(post_caption))

for i in range(len(post_caption)):
	print('Caption:', post_caption[i], '\nTags:', post_tags[i], '\n')

"""### Facebook posts"""

!pip install facebook-sdk

import facebook

num_requests = 1
max_requests = 10
posts = []
aToken = "EAAVH4fqisfcBAIXiJZB5iiGBlTnPnWiBdj9PRZA4TOkCDi2HYp7uwyk2Lv6wgTmM7ii7ZAZAR7oseNc51eXPRqnbZAMne38kuYYW2egxQKOdvW8jJtZAtNGM7evVJ0JTl0ZC4B4RyqIjWig8JoZBH5VFoZC10hDcLrACZCRsGkMk80RvS5Y748EHBpLGRPB1F26aJh8xe9nT9ZBNwje7HZCHwbfp"
graph = facebook.GraphAPI(access_token=aToken)

response = graph.request('me?fields=posts')

for p in response['posts']['data']:
	if 'message' in p:
		posts.append( p['message'].replace('\n', ' ') )

p_next = False
if 'paging' in response['posts']:
	paging = response['posts']['paging']
	p_next = 'next' in paging

while p_next:
	num_requests += 1

	# paging sub element "next" contains a url for the next page of results
	# for our request, we only need the section after specifying the api version
	pos = paging['next'].find('v12.0/') + len('v12.0/')
	req_next = paging['next'][pos:]
	response = graph.request(req_next)

	# the "next page" response contains no "posts" element
	# it goes straight to "data" which has the contents of the posts
	for p in response['data']:
		if 'message' in p:
			posts.append( p['message'].replace('\n', ' ') )

	#Checar si hay siguiente página
	paging = response['paging']
	p_next = ('next' in paging) and (num_requests < max_requests)

print( 'Found {p} posts, with {r} requests'.format(p=len(posts), r=num_requests) )

for p in posts:
	print(p)